<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>HiPhish's Workshop</title><link href="http://hiphish.github.io/" rel="alternate"></link><link href="http://192.168.0.190:8000/blog/atom.xml" rel="self"></link><id>http://hiphish.github.io/</id><updated>2017-05-13T00:00:00+02:00</updated><entry><title>Creating a mock REPL on Unix</title><link href="http://hiphish.github.io/blog/2017/05/13/mock-repl-unix/" rel="alternate"></link><published>2017-05-13T00:00:00+02:00</published><updated>2017-05-13T00:00:00+02:00</updated><author><name>HiPhish</name></author><id>tag:hiphish.github.io,2017-05-13:/blog/2017/05/13/mock-repl-unix/</id><summary type="html">&lt;p&gt;During the development of &lt;a class="reference external" href="https://gitlab.com/HiPhish/repl.nvim/"&gt;REPL.nvim&lt;/a&gt; I had to be able to test the plugin
without relying on any particular REPL present on the development system. The
solution was to create a mock REPL, a shell script which acts like a really
dumb REPL. Here is the code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;EOF&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;false …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;During the development of &lt;a class="reference external" href="https://gitlab.com/HiPhish/repl.nvim/"&gt;REPL.nvim&lt;/a&gt; I had to be able to test the plugin
without relying on any particular REPL present on the development system. The
solution was to create a mock REPL, a shell script which acts like a really
dumb REPL. Here is the code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;EOF&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt;

&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'This is a dummy REPL, it does nothing and comes with no warranty.'&lt;/span&gt;
&lt;span class="k"&gt;until&lt;/span&gt; &lt;span class="nv"&gt;$EOF&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
        &lt;span class="nb"&gt;printf&lt;/span&gt; &lt;span class="s1"&gt;'&amp;gt;&amp;gt;&amp;gt; '&lt;/span&gt;
        &lt;span class="nb"&gt;read&lt;/span&gt; -r &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nv"&gt;EOF&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'true'&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; ! &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$REPLY&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt; &lt;span class="k"&gt;continue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;fi&lt;/span&gt;
        &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$REPLY&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
&lt;span class="k"&gt;done&lt;/span&gt;
&lt;span class="c1"&gt;# Terminating new line if there was no reply&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; ! &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$REPLY&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt; &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;''&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;fi&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The first line is a simple state variable which will be set to &lt;code&gt;true&lt;/code&gt; once the
user presses &lt;code&gt;^D&lt;/code&gt;. As long as the variable remains &lt;code&gt;false&lt;/code&gt; the loop will keep
running.&lt;/p&gt;
&lt;p&gt;Next comes the actual &lt;em&gt;Loop&lt;/em&gt; part of the REPL; it prints a prompt and then
reads a line indefinitely. The &lt;em&gt;Read&lt;/em&gt; part is implemented using the built-in
&lt;code&gt;read&lt;/code&gt; to store the result in the implicit variable &lt;code&gt;$REPLY&lt;/code&gt;. Should &lt;code&gt;read&lt;/code&gt;
read &lt;code&gt;^D&lt;/code&gt; the exist code will be non-zero, causing the conditional &lt;code&gt;||&lt;/code&gt; to set
the &lt;code&gt;EOF&lt;/code&gt; variable to &lt;code&gt;true&lt;/code&gt;. This is our exit mechanism out of the REPL. There
is no &lt;em&gt;Evaluate&lt;/em&gt; part since this is a mock REPL (or you could say that any
input evaluates to itself). Finally the &lt;em&gt;Print&lt;/em&gt; part is implemented by using
&lt;code&gt;echo&lt;/code&gt; to echo back the input.&lt;/p&gt;
&lt;p&gt;Technically the REPL could also be implemented with less code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;EOF&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt;
&lt;span class="k"&gt;until&lt;/span&gt; &lt;span class="nv"&gt;$EOF&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
        &lt;span class="nb"&gt;printf&lt;/span&gt; &lt;span class="s1"&gt;'&amp;gt;&amp;gt;&amp;gt; '&lt;/span&gt;
        &lt;span class="nb"&gt;read&lt;/span&gt; -r &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nv"&gt;EOF&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'true'&lt;/span&gt;
        &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$REPLY&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
&lt;span class="k"&gt;done&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The additional code is just to give the REPL some extra polish. It's not really
needed if no human will never use it, but I like the extra touch. The first
line&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; ! &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$REPLY&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt; &lt;span class="k"&gt;continue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;fi&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;prevents the loop from reaching the &lt;code&gt;echo&lt;/code&gt; if &lt;code&gt;$REPLY&lt;/code&gt; is an empty string.
Without it if the user does not enter any text an empty line would be printed:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
# Without extra touch
&amp;gt;&amp;gt;&amp;gt; foo
foo
&amp;gt;&amp;gt;&amp;gt;

&amp;gt;&amp;gt;&amp;gt; bar
bar

# With textra touch
&amp;gt;&amp;gt;&amp;gt; foo
foo
&amp;gt;&amp;gt;&amp;gt;
&amp;gt;&amp;gt;&amp;gt; bar
bar
&lt;/pre&gt;
&lt;p&gt;The other line&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; ! &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$REPLY&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt; &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;''&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;fi&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;causes &lt;code&gt;echo&lt;/code&gt; to display an empty string. This empty string will move the shell
prompt onto the next line:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
# Without extra polish
sh-3.2$ sh mock-repl.sh
This is a dummy REPL, it does nothing and comes with no warranty.
&amp;gt;&amp;gt;&amp;gt; foo
foo
&amp;gt;&amp;gt;&amp;gt; sh-3.2$

# With extra polish
sh-3.2$ sh mock-repl.sh
This is a dummy REPL, it does nothing and comes with no warranty.
&amp;gt;&amp;gt;&amp;gt; foo
foo
&amp;gt;&amp;gt;&amp;gt; ^D
sh-3.2$
&lt;/pre&gt;
&lt;p&gt;The mock REPL can then be invoked like any other shell script and be used in
place of a real REPL program when testing. That way we do not have to be wary
of any side effects and the developer does not need to have any particular
program installed on their system.&lt;/p&gt;
</content></entry><entry><title>Introducing REPL.nvim</title><link href="http://hiphish.github.io/blog/2017/05/06/introducing-repl-nvim/" rel="alternate"></link><published>2017-05-06T00:00:00+02:00</published><updated>2017-05-06T00:00:00+02:00</updated><author><name>HiPhish</name></author><id>tag:hiphish.github.io,2017-05-06:/blog/2017/05/06/introducing-repl-nvim/</id><summary type="html">&lt;p&gt;Integrating a REPL in Vim has been a difficult issue in the past, but with
Nvim's built-in terminal emulator it is just a few commands away. My new
&lt;a class="reference external" href="https://gitlab.com/HiPhish/repl.nvim/"&gt;REPL.nvim&lt;/a&gt; plugin now puts the REPL only one command away, for any
programming language you wish. The end goal is to …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Integrating a REPL in Vim has been a difficult issue in the past, but with
Nvim's built-in terminal emulator it is just a few commands away. My new
&lt;a class="reference external" href="https://gitlab.com/HiPhish/repl.nvim/"&gt;REPL.nvim&lt;/a&gt; plugin now puts the REPL only one command away, for any
programming language you wish. The end goal is to have a complete generic and
configurable REPL framework which can be customised to the needs of any
language and which forms a solid foundation for other plugins as well.&lt;/p&gt;
&lt;div class="section" id="what-is-repl-nvim-and-why-should-you-care"&gt;
&lt;h2&gt;What is REPL.nvim and why should you care?&lt;/h2&gt;
&lt;p&gt;In its most simple form REPL.nvim is a wrapper around Nvim's built-in terminal
emulator. You execute the &lt;code&gt;:Repl&lt;/code&gt; command and a new window containing a running
REPL instance opens up. Behind the scenes &lt;code&gt;:Repl&lt;/code&gt; opens a new buffer, sets the
parameters, executes &lt;code&gt;:terminal&lt;/code&gt; and launches the REPL process. Originally
REPL.nvim started out as just a REPL for &lt;a class="reference external" href="https://www.gnu.org/software/guile/"&gt;GNU Guile&lt;/a&gt;, but I quickly noticed
that all Guile-specific code could be completely isolated, leaving me with a
language-agnostic plugin.&lt;/p&gt;
&lt;p&gt;This means that the plugin consists roughly speaking of two parts: the actual
plugin that does all the work, and the configuration data which controls the
plugin. The configuration can be set per file type, so any language will have
its own separate settings. As an example, here are the Python settings:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:repl[&lt;span class="s1"&gt;'python'&lt;/span&gt;]: {
    \ &lt;span class="s1"&gt;'bin'&lt;/span&gt;: &lt;span class="s1"&gt;'python'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    \ &lt;span class="s1"&gt;'args'&lt;/span&gt;: []&lt;span class="p"&gt;,&lt;/span&gt;
    \ &lt;span class="s1"&gt;'syntax'&lt;/span&gt;: &lt;span class="s1"&gt;''&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    \ &lt;span class="s1"&gt;'title'&lt;/span&gt;: &lt;span class="s1"&gt;'Python REPL'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
\ }&lt;span class="p"&gt;,&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;All settings are stored inside a dictionary and each entry can be overridden by
user settings or plugins.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-current-state-of-repl-nvim"&gt;
&lt;h2&gt;The current state of REPL.nvim&lt;/h2&gt;
&lt;p&gt;REPL.nvim is already a fully working REPL wrapper. Not many REPLs are supported
at the moment, but adding those is trivial. They can be added to the user's own
Nvim settings, as a plugin, or you could submit a patch to the official
&lt;a class="reference external" href="https://gitlab.com/HiPhish/repl.nvim/"&gt;repository&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The next step is to grow the API. As I mentioned above, my goal is to have a
complete framework which other plugins can hook up to. This means that even if
they want to completely re-route the signal to their own functions they should
be able to do so. For instance, a plugin which uses a regular Nvim buffer
instead of wrapping the terminal emulator should be able to add one entry to
the configuration:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;" This is not yet implemented&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:repl.python.launch_repl &lt;span class="p"&gt;=&lt;/span&gt; {type &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; some_function&lt;span class="p"&gt;(&lt;/span&gt;type&lt;span class="p"&gt;)&lt;/span&gt;}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Thanks to the introduction of lambdas in Vim 8 and Nvim 0.2 it is possible to
make the plugin fully functional.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="contributions-are-welcome"&gt;
&lt;h2&gt;Contributions are welcome&lt;/h2&gt;
&lt;p&gt;If you want to support a REPL or if you have ideas for the API let me know. I
want to be able to support as many REPLs out of the box with reasonable
settings as possible. Head over to the &lt;a class="reference external" href="https://gitlab.com/HiPhish/repl.nvim/"&gt;repository&lt;/a&gt; and get your hands on it.&lt;/p&gt;
&lt;/div&gt;
</content><category term="vim"></category></entry><entry><title>Outlining of HTML pages is fundamentally broken</title><link href="http://hiphish.github.io/blog/2017/04/25/html-outline-fundamentally-broken/" rel="alternate"></link><published>2017-04-25T00:00:00+02:00</published><updated>2017-04-25T00:00:00+02:00</updated><author><name>HiPhish</name></author><id>tag:hiphish.github.io,2017-04-25:/blog/2017/04/25/html-outline-fundamentally-broken/</id><summary type="html">&lt;p&gt;If you were to run the Workshop through an HTML validator you would notice a
lot of warnings about the document outline. What is going on here? HTML 5
defines an &lt;a class="reference external" href="https://www.w3.org/TR/html5/sections.html#outline"&gt;outline algorithm&lt;/a&gt; which allows browsers and assistive
technologies to create an outline of the page. In theory a blind …&lt;/p&gt;</summary><content type="html">&lt;p&gt;If you were to run the Workshop through an HTML validator you would notice a
lot of warnings about the document outline. What is going on here? HTML 5
defines an &lt;a class="reference external" href="https://www.w3.org/TR/html5/sections.html#outline"&gt;outline algorithm&lt;/a&gt; which allows browsers and assistive
technologies to create an outline of the page. In theory a blind person could
ask their reader for the outline of the page and get a sort of table of
contents which they could use to quickly jump to a specific part of the page.&lt;/p&gt;
&lt;p&gt;The problem is the “in theory” part. The outline algorithm has not been
implemented in any of the common browsers and it probably &lt;a class="reference external" href="http://html5doctor.com/computer-says-no-to-html5-document-outline/"&gt;never will be&lt;/a&gt;.
Instead authors are supposed to use the rank of headings &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; through &lt;code&gt;&amp;lt;h6&amp;gt;&lt;/code&gt;
to convey the outline of the document, which is a fundamentally broken concept.&lt;/p&gt;
&lt;div class="section" id="html-does-not-know-what-it-wants-to-be"&gt;
&lt;h2&gt;HTML does not know what it wants to be&lt;/h2&gt;
&lt;p&gt;HTML was originally an application of &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Standard_Generalized_Markup_Language"&gt;SGML&lt;/a&gt;, it was meant to mark up documents.
As such the concept of &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; through &lt;code&gt;&amp;lt;h6&amp;gt;&lt;/code&gt; made sense. The contents of the
document would be inside the &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; and would flow in a one-dimensional way
from top to bottom.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;About Grid Framework&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  Lorem ipsum...

  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h2&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Advantages of Grid Framework&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h2&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h3&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Advantages over other solutions&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h3&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  Lorem ipsum...

  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h3&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Advantages over self-made solutions&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h3&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  Lorem ipsum...

  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h2&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Features of Grid Framework&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h2&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  Lorem ipsum...
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The number of ranks was hard-coded, but six is enough for a document. The
headings could be used as targets to jump to, and since the document is
one-dimensional there is no ambiguity as to what belongs under which heading.&lt;/p&gt;
&lt;p&gt;Of course a product website that looks like it was written in a word processor
does not look appealing, so people began stretching HTML beyond what it was
meant to be. If you look at the source code of the Workshop you will see that
everything is built in a tree-like fashion. You have sections within sections,
multiple navigation items, and two-dimensional layout (some sites even have
three-dimensional layout with popup elements).&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="html-sectioning-tags-solve-the-problem"&gt;
&lt;h2&gt;HTML sectioning tags solve the problem&lt;/h2&gt;
&lt;p&gt;Prior to HTML 5 this lead to &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;-itis, where the page was littered with
&lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; elements with no semantic meaning. This is bad, HTML is supposed to be
all about the content, not the layout. HTML 5 added semantic sectioning, which
solved the problem: the one-dimensional structure was abandoned in favour of a
tree-based structure. Authors can still write classic one-dimensional
documents, but they can also structure the page in terms of sections where
sections can contain any number of sub-sections:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;header&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;img&lt;/span&gt; &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"logo.svg"&lt;/span&gt;&lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;nav&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      ...
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;nav&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;header&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;section&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;header&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;...&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;header&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;main&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      ...
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;main&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;nav&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      ...
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;nav&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;aside&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      ...
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;aside&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;section&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;footer&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    ...
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;footer&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;What about the outline though? Now I know that there is some page element for
navigation, but which kind of navigation is it? This information is conveyed by
the old heading elements. Simple enough, just add a &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; as the first child
of the section and you are good to go. At least that is how it is supposed to
work in theory.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-problem-with-hard-coded-heading-ranks"&gt;
&lt;h2&gt;The problem with hard-coded heading ranks&lt;/h2&gt;
&lt;p&gt;Ideally the rank of the heading does not matter to the outline algorithm. We
could use a &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; for every section and the algorithm would count the section
instead of looking at the rank. Unfortunately this is not implemented in any of
the major browsers and the &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; is treated as a page-wide top-level heading.
In other words, the nesting of our sections is lost and the outline is
completely flat.&lt;/p&gt;
&lt;p&gt;If you look at the simple example above you will notice that the &lt;code&gt;&amp;lt;main&amp;gt;&lt;/code&gt; is a
rank three element, so its proper heading would need to be &lt;code&gt;&amp;lt;h3&amp;gt;&lt;/code&gt;. This leaves
only three more ranks of headings for the contents of the &lt;code&gt;&amp;lt;main&amp;gt;&lt;/code&gt;. We are
still using the old one-dimensional outline method for multi-dimensional
content.&lt;/p&gt;
&lt;div class="section" id="lack-of-heading-ranks"&gt;
&lt;h3&gt;Lack of heading ranks&lt;/h3&gt;
&lt;p&gt;The code snippet I provided was a very simple example, in reality nesting can
go even deeper. Take the Grid Framework news blog: the list of articles has
rank four, and every article preview has rank five. If there is a heading in
the article preview itself that‘s already at rank six, the lowest rank possible
in HTML. One might argue that I should not have built so many ranks in the
first place, but I disagree; the top level (1) is the common structure for the
entire site, the next level (2) is the Grid Framework sub-site, followed by the
blog structure (3), which contains the list of articles (4). This is all
logical nesting based on the hierarchy of the page within the site.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="hard-coded-headings-break-article"&gt;
&lt;h3&gt;Hard-coded headings break &lt;code&gt;&amp;lt;article&amp;gt;&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;The problem becomes even more glaring when you consider that an &lt;code&gt;&amp;lt;article&amp;gt;&lt;/code&gt;
element is supposed to be an element that can stand on its own without the
surrounding content, such as a blog post, a comment or a product card. If the
article cannot have a rank one heading, then it can never stand on its own.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="automation-concerns"&gt;
&lt;h3&gt;Automation concerns&lt;/h3&gt;
&lt;p&gt;This is also a problem with automatic generation of pages. Take this post as an
example: while writing it I should not have to concern myself with the question
of what ranks the headings will have to have in the surrounding page. In fact,
I cannot do that, because after changing the template or uploading the post to
another service or running it through a converter the surrounding ranks could
be completely different, or the concept of surrounding ranks might not even be
applicable. Furthermore, what if I run out of ranks? This article already has
three ranks of titles, now imagine If I wanted to publish actual in-depth
documents.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="how-could-the-problem-be-solved"&gt;
&lt;h2&gt;How could the problem be solved?&lt;/h2&gt;
&lt;p&gt;The &lt;a class="reference external" href="http://html5doctor.com/computer-says-no-to-html5-document-outline/#comment-2130593"&gt;last comment&lt;/a&gt; in the &lt;a class="reference external" href="http://html5doctor.com/computer-says-no-to-html5-document-outline/"&gt;above linked&lt;/a&gt; article describes a good solution:
use the nesting of a section for the global rank and use &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; through &lt;code&gt;&amp;lt;h6&amp;gt;&lt;/code&gt;
for local ranks within that section. Every section would begin with a &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt;
and could contain lesser ranks, but the effective rank of each heading would be
the sum of the section‘s rank and the rank of the heading. This way it would be
possible to structure pages multi-dimensionally, but still use a
one-dimensional structure &lt;em&gt;inside&lt;/em&gt; a section.&lt;/p&gt;
&lt;p&gt;Taking this blog post as an example again, my generator would use the headings
&lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; through &lt;code&gt;&amp;lt;h6&amp;gt;&lt;/code&gt; and the browser would figure out the true rank of a
heading based on how deep the post is actually nested inside the page.
Furthermore, since this post is an &lt;code&gt;&amp;lt;article&amp;gt;&lt;/code&gt; it could be cropped out of the
page and still make sense on its own.&lt;/p&gt;
&lt;p&gt;So what should I do with the Workshop in the meantime? Nothing. I‘m sorry, but
the current one-dimensional ranking system simply cannot be made to work with
this design. In order to make it work I would have to throw away most of the
tree-based design in favour of a flat design with barely no structure. The cost
does no outweigh the benefits. Browser manufacturers need to get their houses
in order, it cannot be that we have WebAssembly and WebGL shaders in our
browsers, but no way of generating an outline for blind people. This is really
telling about where their priorities lie.&lt;/p&gt;
&lt;p&gt;And before anyone decides to call me unprofessional for this attitude, try
outlining the websites of some of the larger companies who hire professional
web designers to work on their sites and see what the result looks like.&lt;/p&gt;
&lt;/div&gt;
</content><category term="html"></category><category term="rant"></category><category term="outline"></category></entry><entry><title>Introducing info.vim</title><link href="http://hiphish.github.io/blog/2016/11/20/introducing-infovim/" rel="alternate"></link><published>2016-11-20T00:00:00+01:00</published><updated>2016-11-20T00:00:00+01:00</updated><author><name>HiPhish</name></author><id>tag:hiphish.github.io,2016-11-20:/blog/2016/11/20/introducing-infovim/</id><summary type="html">&lt;p&gt;There  is a  new project  up at  the Workshop:  &lt;a class="reference external" href="https://gitlab.com/HiPhish/info.vim"&gt;info.vim&lt;/a&gt;, a  Vim plugin  which
implements a  complete reader and browser  for info documents from  within Vim.
This is similar to the standalone &lt;code&gt;info&lt;/code&gt; program or the Emacs info mode.&lt;/p&gt;
&lt;p&gt;Info documents  are generally produced by  the &lt;a class="reference external" href="https://www.gnu.org/software/texinfo/"&gt;Texinfo&lt;/a&gt; program, which …&lt;/p&gt;</summary><content type="html">&lt;p&gt;There  is a  new project  up at  the Workshop:  &lt;a class="reference external" href="https://gitlab.com/HiPhish/info.vim"&gt;info.vim&lt;/a&gt;, a  Vim plugin  which
implements a  complete reader and browser  for info documents from  within Vim.
This is similar to the standalone &lt;code&gt;info&lt;/code&gt; program or the Emacs info mode.&lt;/p&gt;
&lt;p&gt;Info documents  are generally produced by  the &lt;a class="reference external" href="https://www.gnu.org/software/texinfo/"&gt;Texinfo&lt;/a&gt; program, which  is also
the official documentation format for the GNU project. This means that a lot of
important manuals, such  as the Bourne Again Shell user  manual, are written in
this format. One could  read the manual in HTML or PDF,  but that means leaving
the editor and  interrupting the workflow. Another alternative would  be to run
standalone &lt;code&gt;info&lt;/code&gt; from within a Neovim terminal buffer, but even that's more of
a workaround than a  real solution, plus you have to  learn the weird interface
of standalone  &lt;code&gt;info&lt;/code&gt;. Until  now Vim  users had  no real  way of  reading info
documents without interruption.&lt;/p&gt;
&lt;div class="section" id="a-new-info-reader"&gt;
&lt;h2&gt;A new info reader&lt;/h2&gt;
&lt;p&gt;The best way to get  and idea of info.vim is to see it  right in action in this
asccicast:&lt;/p&gt;
&lt;a class="reference external image-reference" href="https://asciinema.org/a/92884"&gt;&lt;img alt="Screencast of using Info.vim" class="img-responsive align-center" src="https://asciinema.org/a/92884.png" style="width: 50%;"/&gt;&lt;/a&gt;
&lt;p&gt;Opening the manual to the Bourne Again Shell is as easy as typing&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;Info bash
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;on the Vim command line. Similar to  standalone &lt;code&gt;info&lt;/code&gt; you can also give a node
to jump to:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;Info bash introduction
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Info.vim uses the same way of finding  files and nodes as standalone &lt;code&gt;info&lt;/code&gt;, so
even  a short  form like  &lt;code&gt;:Info bash intro&lt;/code&gt;  would  find the  right node.  The
command will open a new window or  use an existing window, similar to how Vim's
&lt;code&gt;:help&lt;/code&gt; works.  You can even  use the same  modifier like &lt;code&gt;:vertical&lt;/code&gt;,  it will
works exactly as you would expect.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="navigating-info-documents"&gt;
&lt;h2&gt;Navigating info documents&lt;/h2&gt;
&lt;p&gt;Of course reading a  node of the manual is only half  of what an implementation
of info  should provide.  The other  half is navigating  the manual.  For every
navigation  a corresponding  Vim command  is provided:  &lt;code&gt;:InfoUp&lt;/code&gt;, &lt;code&gt;:InfoNext&lt;/code&gt;,
&lt;code&gt;:InfoPrev&lt;/code&gt;,  &lt;code&gt;:Menu&lt;/code&gt;,   &lt;code&gt;:Follow&lt;/code&gt;  and   &lt;code&gt;:GotoNode&lt;/code&gt;.  All   commands  support
tab-completion (where  applicable) and there  is a  prompt version of  each one
that can be mapped to a key by the user:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;nmap &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;buffer&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; gu &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;Plug&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;InfoUp
nmap &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;buffer&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; gn &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;Plug&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;InfoNext
nmap &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;buffer&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;gp&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;Plug&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;InfoPrev
nmap &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;buffer&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; gm &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;Plug&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;InfoMenu
nmap &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;buffer&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; gf &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;Plug&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;InfoFollow
nmap &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;buffer&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;go&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;Plug&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;InfoGoto
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="advanced-info"&gt;
&lt;h2&gt;Advanced info&lt;/h2&gt;
&lt;p&gt;For those who like  to dig deeper into the meat and build  their own scripts on
top of  info.vim there are two  very handy features: the  &lt;code&gt;b:info&lt;/code&gt; variable and
info URIs. &lt;code&gt;b:info&lt;/code&gt;  is a buffer-local dictionary that  holds information about
the current node, such  as sibling nodes, its file or a list  of menu items. An
info URI  is a  special URI  that can be  used to  identify info  documents. By
executing&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;" We had to escape the '%' with '\%' because of Vim&lt;/span&gt;
&lt;span class="p"&gt;:&lt;/span&gt;edit info:&lt;span class="sr"&gt;//&lt;/span&gt;bash.info&lt;span class="sr"&gt;/What\%20is\%20Bash\%3f/&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;you will  open the corresponding node  right in your current  window. Much like
with the &lt;code&gt;:Info&lt;/code&gt; command you can  also use a short URI like &lt;code&gt;info://bash/what&lt;/code&gt;.
Info.vim  is clever  and will  normalise  your URI  so  you don't  end up  with
multiple buffers all displaying the same content. With this of normalisation in
place we can  even add extra information  to the URI's query, like  a line- and
column number:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;edit info:&lt;span class="sr"&gt;/bash.info/&lt;/span&gt;What\%&lt;span class="m"&gt;20&lt;/span&gt;is\%&lt;span class="m"&gt;20&lt;/span&gt;Bash\%&lt;span class="m"&gt;3&lt;/span&gt;f/?line&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&amp;amp;column&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="m"&gt;7&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So go ahead, download info.vim and browse all those info manuals that have been
collecting dust  on your  hard drive  so far,  and don't  forget to  report any
issues you might come across.&lt;/p&gt;
&lt;/div&gt;
</content><category term="vim"></category><category term="info"></category></entry><entry><title>Rewriting the Workshop</title><link href="http://hiphish.github.io/blog/2016/09/27/rewriting-the-workshop/" rel="alternate"></link><published>2016-09-27T00:00:00+02:00</published><updated>2016-09-27T00:00:00+02:00</updated><author><name>HiPhish</name></author><id>tag:hiphish.github.io,2016-09-27:/blog/2016/09/27/rewriting-the-workshop/</id><summary type="html">&lt;p&gt;At this point I  could start to make rewriting  my website an annual tradition.
There have been a number of little  details that have been rubbing me the wrong
way for almost a year now;  the biggest one was the navigation bar on sub-sites
like the  Grid Framework  product site …&lt;/p&gt;</summary><content type="html">&lt;p&gt;At this point I  could start to make rewriting  my website an annual tradition.
There have been a number of little  details that have been rubbing me the wrong
way for almost a year now;  the biggest one was the navigation bar on sub-sites
like the  Grid Framework  product site.  There were  also accessibility  issues
relating  to  the lack  of a  proper  HTML  document  outline  and  the  use of
JavaScript.&lt;/p&gt;
&lt;div class="section" id="the-sub-site-navigation-bar"&gt;
&lt;h2&gt;The sub-site navigation bar&lt;/h2&gt;
&lt;p&gt;Until now I had simply been using the same standard navigation bar that is also
on top of every page.  This worked,  but it was pretty ugly because even though
one bar was clearly subordinate both looked the same. The sub-site bar needs to
be smaller and less prominent.&lt;/p&gt;
&lt;p&gt;The solution was to  roll my own code for  my own sub-site navigation bar.  The
bar itself is simply  a plain &lt;code&gt;&amp;lt;ul&amp;gt;&lt;/code&gt;  and I am using the  CSS flexbox module to
style it. Here is what the HTML looks like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;nav&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"sub-site-nav"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Sub-site navigation bar&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"#"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Title&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"#"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Item 1&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"#"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Item 2&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"#"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Item 3&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"#"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Item 4&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;nav&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That's it,  we only specify that  our &lt;code&gt;&amp;lt;nav&amp;gt;&lt;/code&gt; is a  sub-site navigation bar and
let the CSS style the elements accordingly. You will also notice that the title
is part of the list as well; I will use CSS to style the title differently, but
some people prefer to  make the title a separate element from the list.  I made
it  part of  the list  because  despite the  visual  distinction it is  all one
navigation bar and the title should be counted when enumerating the list.&lt;/p&gt;
&lt;p&gt;With the content set  in place we can start applying the style to it.  Since we
have wrapped everything  inside a &lt;code&gt;.sub-site-nav&lt;/code&gt;  item we style only its child
elements.  First let's  hide the  heading,  it's  only used  for   the document
outline.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;sub-site-nav&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;h1&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="k"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now comes the interesting part: the list.  I am using the CSS flexbox module to
style the site, it's a fairly new feature that allows us to pass specifications
in CSS on how to distribute elements and let the browser figure out the optimum
instead of computing values by hand. To this end we have to declare the list to
be a flex container&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;sub-site-nav&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;ul&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="k"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
   &lt;span class="k"&gt;flex-wrap&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;wrap&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
   &lt;span class="k"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;flex-end&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The  last property  &lt;code&gt;justify-content: flex-end&lt;/code&gt;  will push all elements  to the
right while preserving their order  (non-flexbox hacks would always reverse the
order).  We are almost done,  but in order to make the  navigation look good we
have to make the title stand out from the other list items.  Since the title is
the first child of the list we can use the &lt;code&gt;first-child&lt;/code&gt; pseudo-class:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;sub-site-nav&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;ul&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nd"&gt;first-child&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="k"&gt;margin-right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will push  the first element as  far to the left as possible.  All that is
now left is  styling the list  elements themselves  so they  look good.  I also
styled the &lt;code&gt;nav&lt;/code&gt;  itself to  give it a border  line at the  bottom to stand out
from the rest of the page.  Thanks to flexbox it has been dead-simple to evenly
distribute the  items in a  few lines of  CSS instead of  heaving to  resort to
awkward helper-classes or empty &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; elements.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="document-outline"&gt;
&lt;h2&gt;Document outline&lt;/h2&gt;
&lt;p&gt;The  document outline  is what made  me rewrite all  the templates  almost from
scratch.  The old  outline  was  all flat,  so I  had to  introduce  sectioning
elements where I had  &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; elements before and  use semantic HTML where ever
possible. In order to make it possible to identify those sections I also had to
add headings  everywhere and  hide them via CSS,  as shown above.  The workshop
should now become more  accessible once more client  software starts supporting
the  outline algorithm.  Go ahead and try it out,  open this page in the &lt;a class="reference external" href="http://gsnedders.html5.org/outliner/"&gt;HTML5
Outliner&lt;/a&gt; and see the result.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="a-new-blog-navigator"&gt;
&lt;h2&gt;A new blog navigator&lt;/h2&gt;
&lt;p&gt;The sidebar for the blogs has also been changed from the ground up. The old one
was too  bulky and  had a  fancy  "accordion"  feature:  clicking a  year would
un-collapse a list  of sub-entries.  That way  you could  click a year,  then a
month, and you would see all articles for that month right in the side bar.  It
was pretty fancy,  but not very useful and utterly unusable without JavaScript,
so I threw it out.&lt;/p&gt;
&lt;p&gt;The new  navigator is all static:  clicking a year will take you to the archive
of that year instead.  You can  see all articles  from that year in the body of
the page,  and in the  navigator a  sub-list of  months will  appear under that
year.  Clicking a month will  take you to the archive of that month,  narrowing
the body of the page down to only those articles.&lt;/p&gt;
&lt;p&gt;Effectively the  new navigator  has exactly  the same  features as the old one,
except it is static now. This means you will have to load a new page, but since
there is no JavaScript to execute  this will be very fast. The new navigator is
also more accessible because it only lists the relevant items instead of having
an archive of the entire blog at all times.&lt;/p&gt;
&lt;p&gt;Finally, on small screen sizes the navigator is moved down beneath the articles
and all the lists are hidden. They would take up too much screen space, instead
the reader can  click the titles or  the archives and get taken there.  This is
accomplished using flexbox again. Here is the HTML first:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;section&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"blog-body"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
   &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Blog&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

   &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;main&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
     &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;section&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        All the articles go here
     &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;section&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
   &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;main&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;nav&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
     &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Blog navigation&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
     &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;nav&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"#"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Archives&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          ...
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
     &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;nav&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
     &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;nav&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"#"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Categories&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          ...
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
     &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;nav&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
     &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;nav&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"#"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Tags&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          ...
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
     &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;nav&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;nav&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;section&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;/* The blog body contains the navigator and the articles list */&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;blog-body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="k"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;blog-body&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;nav&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="k"&gt;order&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;-1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="c"&gt;/* Move the navigator left from the article */&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will put the article(s) and  the navigator horizontally next to each other
and move the  navigator visually  before the  article by  changing  the &lt;code&gt;order&lt;/code&gt;
property. For smaller devices we use a media query to change the flex direction
to a colum, which will put the navigator on top of the articles.  We change the
order to move the navigator down and hide the lists.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="k"&gt;media&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;max-width&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;768px&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="c"&gt;/* Re-arrange the articles and navigator vertically */&lt;/span&gt;
   &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;blog-body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;flex-direction&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;column&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;

   &lt;span class="c"&gt;/* The navigator comes after the articles now. */&lt;/span&gt;
   &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;blog-body&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;nav&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;order&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="k"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="k"&gt;flex-wrap&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;wrap&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="k"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;space-between&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;

   &lt;span class="c"&gt;/* Hide the navigator lists, they are too large */&lt;/span&gt;
   &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;blog-body&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;nav&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;nav&lt;/span&gt; &lt;span class="nt"&gt;ul&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="hamburger-menu-without-javascript"&gt;
&lt;h2&gt;Hamburger menu without JavaScript&lt;/h2&gt;
&lt;p&gt;Every site should provide its  full functionality without requiring JavaScript.
It might  not be as pretty,  but it has to fully work.  The standard navigation
bar example from Bootstrap requires JavaScript for the toggle, but it turns out
that it can  also be accomplished without.  The following  trick comes from the
blog of &lt;a class="reference external" href="http://viralpatel.net/blogs/bootstrap-navbar-menu-without-javascript/"&gt;Viral Patel&lt;/a&gt;, so all credit goes to him.&lt;/p&gt;
&lt;p&gt;Here is the HTML:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;nav&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"navbar navbar-default"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"container"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;input&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"checkbox"&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"navbar-toggle-cbox"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"navbar-header"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;label&lt;/span&gt; &lt;span class="na"&gt;for&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"navbar-toggle-cbox"&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"navbar-toggle collapsed"&lt;/span&gt;
             &lt;span class="na"&gt;data-toggle&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"collapse"&lt;/span&gt; &lt;span class="na"&gt;data-target&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"#navbar"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"sr-only"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Toggle navigation&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"icon-bar"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"icon-bar"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"icon-bar"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;label&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"navbar-brand"&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"#"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Project name&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"navbar"&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"navbar-collapse collapse"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"nav navbar-nav"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"active"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"#"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Home&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"#about"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;About&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;nav&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The differences are  the existence of a new  &lt;code&gt;&amp;lt;input type="checkbox"&amp;gt;&lt;/code&gt;  element
and changing the  &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt; to a &lt;code&gt;&amp;lt;label&amp;gt;&lt;/code&gt;.  This by itself won't do anything,
we need a few lines of CSS as well:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;#&lt;/span&gt;&lt;span class="nn"&gt;navbar-toggle-cbox&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="k"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="kc"&gt;none&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;#&lt;/span&gt;&lt;span class="nn"&gt;navbar-toggle-cbox&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nd"&gt;checked&lt;/span&gt; &lt;span class="o"&gt;~&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;collapse&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="k"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;block&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;First we  hide the checkbox  from sight,  then we  use its  state to toggle the
display of the &lt;code&gt;.collapse&lt;/code&gt;.  If JavaScript is available  the new hamburger menu
will work  just like before,  but if  JavaScript is  unavailable the  collapsed
items will still pop up.  It won't be as pretty because there will be no smooth
animation, but it will be usable.&lt;/p&gt;
&lt;p&gt;I consider this a hack because it introduces an extra HTML item, but as long as
there is no built-in  solution in HTML or CSS  every approach is more or less a
hack.&lt;/p&gt;
&lt;/div&gt;
</content><category term="website"></category></entry><entry><title>Introducing IPS-Tools</title><link href="http://hiphish.github.io/blog/2016/07/06/intro-ips-tools/" rel="alternate"></link><published>2016-07-06T00:00:00+02:00</published><updated>2016-07-06T00:00:00+02:00</updated><author><name>HiPhish</name></author><id>tag:hiphish.github.io,2016-07-06:/blog/2016/07/06/intro-ips-tools/</id><summary type="html">&lt;p&gt;I found myself needing a program to apply binary patches in the IPS file format
and I was really disappointed  that there are no proper  Unix programs for that
purpose available.  So I set out to make my own,  but instead of just  applying
patches it would be a complete …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I found myself needing a program to apply binary patches in the IPS file format
and I was really disappointed  that there are no proper  Unix programs for that
purpose available.  So I set out to make my own,  but instead of just  applying
patches it would be a complete suite of tools to handle all IPS-related tasks.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://gitlab.com/HiPhish/IPS-Tools"&gt;IPS-Tools&lt;/a&gt; is the result, it consists of three standalone CLI programs, one CLI
program that acts as an entry point to the suite, and a C library for inclusion
in other applications. There are three programs because I have identified three
problem domains: applying a patch, generating a patch and examining a patch.&lt;/p&gt;
&lt;p&gt;The tools are all written in C99 using only the standard library, they are tiny
and  should  run  on  pretty  much  anything.  Great  for  embedding  in  other
applications.  In fact,  I have a  GUI frontend that  uses the library  to give
users a drag &amp;amp; drop interface, but it still needs some more polish before I can
release it.&lt;/p&gt;
&lt;p&gt;I also took the opportunity  to write a complete specification  of the IPS file
format, because all I was able to find have been bits and pieces everywhere and
only closed-source programs, so I had to piece things together. IPS is a fairly
simple format,  but it  has some  hairy corners  because over  time people have
added  extensions  to it  (compressed records  and truncation).  With IPS-tools
there is a complete  file specification and  a reference implementation  freely
available to the public.&lt;/p&gt;
</content></entry><entry><title>Highlighting NSImageView the right way</title><link href="http://hiphish.github.io/blog/2016/06/25/highlighting-nsimageview/" rel="alternate"></link><published>2016-06-25T00:00:00+02:00</published><updated>2016-06-25T00:00:00+02:00</updated><author><name>HiPhish</name></author><id>tag:hiphish.github.io,2016-06-25:/blog/2016/06/25/highlighting-nsimageview/</id><summary type="html">&lt;p&gt;Recently  I have  been working on  a small Cocoa  app and one  of the  things I
needed to do was highlight an  &lt;code&gt;NSImageView&lt;/code&gt; when the user is hovering above it
while dragging a file.  You would think  that it's a very simple task,  and you
would be right, but judging …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Recently  I have  been working on  a small Cocoa  app and one  of the  things I
needed to do was highlight an  &lt;code&gt;NSImageView&lt;/code&gt; when the user is hovering above it
while dragging a file.  You would think  that it's a very simple task,  and you
would be right, but judging by some of the things on the internet it looks like
an unsolved problem.&lt;/p&gt;
&lt;p&gt;The difficult part about Mac development is not Objective-C, if you know C then
you can learn  Objective-C in a  few days.  The hard part is Cocoa.  Cocoa is a
very old framework,  older than .NET, Java and macOS.  A framework  this old is
guaranteed to have grown a lot  over the years and finding what you are looking
for can  be a  daunting task.  Even Apple's  own documentation  is filled  with
deprecated API calls or downright bad practice.&lt;/p&gt;
&lt;div class="section" id="the-wrong-way"&gt;
&lt;h2&gt;The wrong way&lt;/h2&gt;
&lt;p&gt;Here is how Apple's own documentation highlights an &lt;code&gt;NSImageView&lt;/code&gt; instance. The
code is from the official &lt;a class="reference external" href="https://developer.apple.com/library/mac/samplecode/CocoaDragAndDrop/Introduction/Intro.html"&gt;CocoaDragAndDrop&lt;/a&gt; example.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;-(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;drawRect:&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NSRect&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nv"&gt;rect&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="cm"&gt;/*------------------------------------------------------&lt;/span&gt;
&lt;span class="cm"&gt;        draw method is overridden to do drop highlighing&lt;/span&gt;
&lt;span class="cm"&gt;    --------------------------------------------------------*/&lt;/span&gt;
    &lt;span class="c1"&gt;//do the usual draw operation to display the image&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;super&lt;/span&gt; &lt;span class="nl"&gt;drawRect&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;rect&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;highlight&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;//highlight by overlaying a gray border&lt;/span&gt;
        &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="n"&gt;NSColor&lt;/span&gt; &lt;span class="n"&gt;grayColor&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;set&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;NSBezierPath&lt;/span&gt; &lt;span class="nl"&gt;setDefaultLineWidth&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;NSBezierPath&lt;/span&gt; &lt;span class="nl"&gt;strokeRect&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rect&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;There are other  implementations on the internet,  but those can be excused for
not being official. They all have the same fundamental problem anyway,  so I'll
just use this one for illustration.&lt;/p&gt;
&lt;p&gt;The implementation  looks simple  enough and works,  but only  as long  as your
&lt;code&gt;NSImageView&lt;/code&gt; instance satisfies the assumptions made here.  We assume that our
view object will always have  the outline of a rectangle and we assume that the
chosen colour  will always  be adequate.  In my  case the first  assumption was
already broken from the start because I was using the &lt;em&gt;Bezel&lt;/em&gt; style for my view
objects, a style that is part of Cocoa itself. There is also no telling when in
the future Apple might change the default colours, making your choice of colour
inadequate. And that's not even going into portability if you want to use
GNUStep to port your app to other operating systems.&lt;/p&gt;
&lt;p&gt;What we want is an abstraction.  Abstractions provide us with a clean interface
that can remain stable while  the underlying implementation  can change wildly.
Cocoa has abstractions everywhere, such as using &lt;code&gt;NSURL&lt;/code&gt; for file paths instead
of C  strings  or even &lt;code&gt;NSString&lt;/code&gt;.  Doing things  your own  way should  only be
reserved for when  you actually have control over the underlying code.  So if I
were  to  draw my  own  shapes  for an  &lt;code&gt;NSView&lt;/code&gt; I  would  also  be comfortable
hard-coding my own highlighting.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-right-way"&gt;
&lt;h2&gt;The right way™&lt;/h2&gt;
&lt;p&gt;As it turns out  Cocoa already provides  us with the  means of abstraction  for
highlighting.  The &lt;code&gt;NSControl&lt;/code&gt; class has the &lt;code&gt;highlighted&lt;/code&gt; property,  which has
the getter &lt;code&gt;isHighlighted&lt;/code&gt;,  so we don't need  a new property.  For drawing the
actual highlight &lt;code&gt;NSView&lt;/code&gt;  provides the method &lt;code&gt;drawFocusRingMask&lt;/code&gt;.  Subclasses
can override  the property  to implement  their own  highlighting  and  luckily
&lt;code&gt;NSImageView&lt;/code&gt; does exacly that.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;drawRect:&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NSRect&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nv"&gt;dirtyRect&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;super&lt;/span&gt; &lt;span class="nl"&gt;drawRect&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;dirtyRect&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="nb"&gt;self&lt;/span&gt; &lt;span class="n"&gt;isHighlighted&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;self&lt;/span&gt; &lt;span class="n"&gt;drawFocusRingMask&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now your code is future-proof and will work regardless of the shape you choose.
Well, at least until Apple deprecates this method.&lt;/p&gt;
&lt;/div&gt;
</content><category term="cocoa"></category></entry><entry><title>Introducing NTFS-Clone</title><link href="http://hiphish.github.io/blog/2016/05/31/into-ntfs-clone/" rel="alternate"></link><published>2016-05-31T00:00:00+02:00</published><updated>2016-05-31T00:00:00+02:00</updated><author><name>HiPhish</name></author><id>tag:hiphish.github.io,2016-05-31:/blog/2016/05/31/into-ntfs-clone/</id><summary type="html">&lt;p&gt;This is  a very  useful project  I had  written quite  a while  ago at work and
recently found collecting dust on my hard drive. It lets you create perfect 1:1
copies of NTFS hard drives on Unix.  The problem with every software I had come
across was  that it …&lt;/p&gt;</summary><content type="html">&lt;p&gt;This is  a very  useful project  I had  written quite  a while  ago at work and
recently found collecting dust on my hard drive. It lets you create perfect 1:1
copies of NTFS hard drives on Unix.  The problem with every software I had come
across was  that it would copy the data,  but that wasn't enough,  so we had to
run Windows repair on every single drive.&lt;/p&gt;
&lt;p&gt;What makes NTFS-Clone different from these other software is that the resulting
drive works out of the box.  I achieved this by  following the Unix philosophy:
there are already  command-line tools  that do small parts of the job,  so if I
can take  them and  glue them  together in  the right  way I  can solve the big
problem.&lt;/p&gt;
&lt;p&gt;The result  was rock-stable  and since it  was run on  the command-line we were
able  to automate  the entire process  to clone multiple  drives in  succession
instead of having to babysit them all day. So if you are right now wasting your
time babysitting hard drives,  grab yourself a copy  of &lt;a class="reference external" href="https://gitlab.com/HiPhish/ntfs-clone"&gt;NTFS-Clone&lt;/a&gt; and buy one
of those things where you can plug in several drives and automate your work.&lt;/p&gt;
</content></entry><entry><title>Neovim has tab-local working directories now</title><link href="http://hiphish.github.io/blog/2016/04/22/neovim-tcd/" rel="alternate"></link><published>2016-04-22T00:00:00+02:00</published><updated>2016-04-22T00:00:00+02:00</updated><author><name>HiPhish</name></author><id>tag:hiphish.github.io,2016-04-22:/blog/2016/04/22/neovim-tcd/</id><summary type="html">&lt;p&gt;My Neovim PR to add tab-local working directories has recently been merged.  In
this post I will explain what it does and why you will love it.&lt;/p&gt;
&lt;div class="section" id="what-are-working-directories-in-vim"&gt;
&lt;h2&gt;What are working directories in Vim?&lt;/h2&gt;
&lt;p&gt;If you know Vim  feel free to skip  this section,  otherwise read on.  Vim is a
terminal …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;My Neovim PR to add tab-local working directories has recently been merged.  In
this post I will explain what it does and why you will love it.&lt;/p&gt;
&lt;div class="section" id="what-are-working-directories-in-vim"&gt;
&lt;h2&gt;What are working directories in Vim?&lt;/h2&gt;
&lt;p&gt;If you know Vim  feel free to skip  this section,  otherwise read on.  Vim is a
terminal application  and the  directory you  launch it  from is  the  &lt;em&gt;working
directory&lt;/em&gt; for  that session.  Even if you use a  GUI version of Vim you have a
working directory which  usually defaults to your home directory.  Any time you
issue an ex-command  or call a shell command  all paths will be  interpreted as
relative to the current working directory.&lt;/p&gt;
&lt;p&gt;Take for  instance the &lt;code&gt;:make&lt;/code&gt; ex-command.  It will call your make program from
the working  directory  and  that program  will usually  search for  a sort  of
makefile  in  that  directory.  Let's  assume you have  a C project  in its own
directory and a makefile in that directory as well.  If Vim's working directory
is the same as the project  directory you  can run &lt;code&gt;:make&lt;/code&gt; and have the project
built immediately.&lt;/p&gt;
&lt;p&gt;This isn't limited  to just &lt;code&gt;:make&lt;/code&gt; alone,  any file navigation also depends on
it. If you have a file browser plugin like  Netrw or NERDTree installed you can
just issue the  ex-command &lt;code&gt;:edit .&lt;/code&gt;  and browse your  project directory.  File
finders like Ctrl-P or Unite would have to go through a huge tree of completely
unrelated directories before they reach the sub-tree of your project. There are
many more examples,  but the point is that  your working directory should match
your project directory.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-motivation-for-tab-local-working-directories"&gt;
&lt;h2&gt;The motivation for tab-local working directories&lt;/h2&gt;
&lt;p&gt;Sometimes you  need to  work  on more  than one project  at a  time.  Take this
website:  There is the website itself, which is one project,  and there are the
Jinja  templates,  which is  another project.  Sometimes I  find a  bug in  the
website and I have to switch to the template project.  I could launch a new Vim
instance, but the instances would be completely isolated. I couldn't transplant
HTML  snippets  from  one  into the  other without  going  through  the  system
clipboard.  Searches issued in  one instance  would not appear in the other,  I
would  have  to  repeat  them  but  that  can  be  really  annoying in  case of
complicated regexes.&lt;/p&gt;
&lt;p&gt;The idea to implement this  feature can from a Vim &lt;a class="reference external" href="http://vimcasts.org/episodes/how-to-use-tabs/"&gt;screencast by Drew Neil&lt;/a&gt;.
In it for some reason  his build of Vim does  have separate working directories
for each tab by default. He seems to think that's a regular feature, but if you
take a look at the comment section you will see that it clearly is not. My best
guess is that it was a bug,  but even after working with the internals of Vim I
cannot imagine how it could have happened.&lt;/p&gt;
&lt;p&gt;There is a Vim plugin called &lt;a class="reference external" href="https://github.com/kana/vim-tabpagecd"&gt;vim-tabpagecd&lt;/a&gt; which makes all tabs have their own
working directory by default.  I was using it for a while, but giving every tab
its own working directory every time seems overkill to me.  So the only natural
course of action was to implement it in Vim directly.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-tcd-ex-command"&gt;
&lt;h2&gt;The &lt;code&gt;:tcd&lt;/code&gt; ex-command&lt;/h2&gt;
&lt;p&gt;I modified Neovim instead of Vim because that's the editor I actually use,  but
if anyone wants  to port this feature  to Vim be my guest.  Anyway, Vim already
has a  similar feature  in the  &lt;code&gt;:lcd&lt;/code&gt; command,  except that  that  command  is
limited to just one window.  I decided the call my command &lt;code&gt;:tcd&lt;/code&gt;;  it's short,
easy to remember and it if you know &lt;code&gt;:lcd&lt;/code&gt; you also know &lt;code&gt;:tcd&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Working directories take precedence over each other with deeper ones overriding
higher ones.  In practice this means that  &lt;code&gt;:tcd&lt;/code&gt; overrides  the global working
directory and that &lt;code&gt;:lcd&lt;/code&gt; overrides the tab-local working directory.&lt;/p&gt;
&lt;p&gt;Bigger changes had to be made to the &lt;code&gt;getcwd()&lt;/code&gt; function. In order to not break
backwards compatibility the function will still work without any arguments,  in
which case  it returns  the effective  working  directory.  If you  supply  one
argument it is  taken to be the number  of the window in the &lt;em&gt;current&lt;/em&gt; tab,  so
you get that window's  effective working directory.  So far this is the same as
in Vim.  However, if you supply a second argument  it is taken to be the number
of a tab. In other words &lt;code&gt;getcwd(3, 2)&lt;/code&gt; returns the effective working directory
of window number  3 in tab number 2.  You can  always use the  number 0 for the
current window  or tab.  Here is where  it gets  interesting:  if you  want the
working directory of a tab regardless  what the working directory of the window
is you supply -1 as  the number of the window.  Even if the window  has its own
local working directory it will be ignored.&lt;/p&gt;
&lt;p&gt;The function &lt;code&gt;haslocaldir()&lt;/code&gt;  works exactly the  same as &lt;code&gt;getcwd()&lt;/code&gt;,  except it
returns whether the working directory is local to that scope.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="even-more-scopes"&gt;
&lt;h2&gt;Even more scopes?&lt;/h2&gt;
&lt;p&gt;A major part  of Neovim's missions  statement is to  bring the codebase  of Vim
into a better state.  The tab-local working directory  feature hasn't been just
bolted onto the existing code, I have properly refactored the inner workings so
that adding a new scope  should take only a few lines of code from now on.  One
could  for example  add a "buffer"  scope that takes  precedence over  tabs and
affects all windows displaying that buffer.  Of course such a scope would raise
new design concerns and it's questionable whether it would even be useful,  but
the important point is that it is now possible.&lt;/p&gt;
&lt;/div&gt;
</content><category term="vim"></category></entry><entry><title>Feeds are live now</title><link href="http://hiphish.github.io/blog/2015/11/14/feeds-live-now/" rel="alternate"></link><published>2015-11-14T00:00:00+01:00</published><updated>2015-11-14T00:00:00+01:00</updated><author><name>HiPhish</name></author><id>tag:hiphish.github.io,2015-11-14:/blog/2015/11/14/feeds-live-now/</id><summary type="html">&lt;p&gt;RSS- and Atom feeds are live now. You can subscribe to an entire blog using the
links in the navigator or you can subscribe to a particular category in a blog.
For that navigate to the category using either the navigator or by clicking the
category button of an article …&lt;/p&gt;</summary><content type="html">&lt;p&gt;RSS- and Atom feeds are live now. You can subscribe to an entire blog using the
links in the navigator or you can subscribe to a particular category in a blog.
For that navigate to the category using either the navigator or by clicking the
category button of an article.&lt;/p&gt;
</content><category term="website"></category></entry><entry><title>We are live!</title><link href="http://hiphish.github.io/blog/2015/11/11/we-are-live/" rel="alternate"></link><published>2015-11-11T00:00:00+01:00</published><updated>2015-11-11T00:00:00+01:00</updated><author><name>HiPhish</name></author><id>tag:hiphish.github.io,2015-11-11:/blog/2015/11/11/we-are-live/</id><summary type="html">&lt;p&gt;The Workshop blog is finally up and running, in all its static glory. This
makes the site practically complete, at least as complete as a website can ever
be anyway. It also works great with my &lt;a class="reference external" href="https://gitlab.com/HiPhish/Multiblog-Pelican"&gt;Multiblog&lt;/a&gt; plugin.&lt;/p&gt;
&lt;p&gt;I wanted to be able to have more than one blog on …&lt;/p&gt;</summary><content type="html">&lt;p&gt;The Workshop blog is finally up and running, in all its static glory. This
makes the site practically complete, at least as complete as a website can ever
be anyway. It also works great with my &lt;a class="reference external" href="https://gitlab.com/HiPhish/Multiblog-Pelican"&gt;Multiblog&lt;/a&gt; plugin.&lt;/p&gt;
&lt;p&gt;I wanted to be able to have more than one blog on the site. A blog can be a
place for personal ramblings about things no one else care about, but a blog
can also be the primary source of news. Mixing these two seemed like a very bad
idea to me; people might be only interested in one thing, for example Grid
Framework in my case and they don't want their time wasted with other products
and completely unrelated topics.&lt;/p&gt;
&lt;p&gt;So here is my solution: have multiple blogs on the site. A blog consists of
articles and the interface. Blogs can share articles, and the interface is
generated accordingly. The interface is all you see around the main content:
tabs, categories, archives, period archives and so on. I could for example have
one blog for every project and one blog for all projects. People could either
subscribe to the blogs they care about or they subscribe to the aggregate blog.
Anything is possible really.&lt;/p&gt;
&lt;p&gt;As for the blog interface itself, my main goal was in making it easy to
navigate. Originally I had intended for a "temple"-like layout, also called the
&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Holy_Grail_(web_design)"&gt;"Holy Grail"&lt;/a&gt; of web
design because finding a hack-free implementation used to be like searching for
the Holy Grail. Here is a sketch of what it looks like:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
┏━━━━━━━━━━━━━━━━━━━━━━━━━┓
┃          Header         ┃
┣━━━┯━━━━━━━━━━━━━━━━━┯━━━┫
┃   │                 │   ┃
┃ N │     Content     │ A ┃
┃ a │                 │ d ┃
┃ v │                 │ s ┃
┃   │                 │   ┃
┃   │ &amp;lt;-           -&amp;gt; │   ┃
┣━━━┷━━━━━━━━━━━━━━━━━┷━━━┫
┃          Footer         ┃
┗━━━━━━━━━━━━━━━━━━━━━━━━━┛
&lt;/pre&gt;
&lt;p&gt;Thanks to the new flexbox features of CSS this layout is now trivial to
implement and the search is over, check out &lt;a class="reference external" href="http://philipwalton.github.io/solved-by-flexbox/"&gt;Solved by Flexbox&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;However, I decided to opt out of the right column. For one it was making the
content look too crammed in between, and the other reason is that I had no idea
what to put in there. I wouldn't use ads because you need &lt;em&gt;a lot&lt;/em&gt; of clicks to
make them worthwhile and this simply is not one of those blogs where I can put
out content worth reading all the time.&lt;/p&gt;
&lt;p&gt;The left column is used for navigation. This includes period-archives,
categories, tags and authors. I went fancy with an accordion-style tree of
articles, which sadly does not work without JavaScript. That's why the title of
every navigator menu is also a hyperlink to the corresponding archive. Since
archives are nested into archives I also added a navigation breadcrumbs menu
above the content. The finished layout looks like this:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
┏━━━━━━━━━━━━━━━━━━━━━━━━━┓
┃          Header         ┃
┣━━━┯━━━━━━━━━━━━━━━━━━━━━┫
┃   │YYYY/MM/DD/slug      ┃
┃ N ├─────────────────────┃
┃ a │       Content       ┃
┃ v │                     ┃
┃   │                     ┃
┃   │                     ┃
┃   │ &amp;lt;-               -&amp;gt; ┃
┣━━━┷━━━━━━━━━━━━━━━━━━━━━┫
┃          Footer         ┃
┗━━━━━━━━━━━━━━━━━━━━━━━━━┛
&lt;/pre&gt;
&lt;p&gt;The URL of each page is chosen so that moving one directory up in the hierarchy
will move you to the parent archive. For instance, a blog post has the URL
&lt;code&gt;website.com/blog/year/month/day/slug&lt;/code&gt;. Removing the &lt;code&gt;slug&lt;/code&gt; will take you
to the daily archive, removing the day takes you to the monthly archive and
removing the month takes you to the yearly archive. Removing even the year
takes you to the index of the blog. Pretty neat. If changing the URL is too
cumbersome one can also use the breadcrumbs at the top. In my case there are no
daily archives because I will rarely ever write more than one post per day.&lt;/p&gt;
&lt;p&gt;There is no way to subscribe to a blog at the moment, but making Pelican
generate RSS feeds should be trivial. I just haven't looked into yet, I figured
it was better to release now rather than holding back just because of a feature
that does not affect the blogs themselves.&lt;/p&gt;
&lt;p&gt;Some aspects of the blog might seem redundant, like having an &lt;em&gt;authors&lt;/em&gt; archive
when there is only one author on the site. That's me "eating my own dogfood", I
am using a feature because I want to demonstrate its purpose.&lt;/p&gt;
&lt;p&gt;Well, that's it for now, we'll see where this ride will take be from now on.
It's going to be interesting :)&lt;/p&gt;
</content><category term="website"></category></entry></feed>