<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>HiPhish's Workshop</title><link>http://hiphish.github.io/</link><description></description><lastBuildDate>Sun, 16 Jul 2017 00:00:00 +0200</lastBuildDate><item><title>A purely functional fixed timestep loop</title><link>http://hiphish.github.io/blog/2017/07/16/functional-fixed-timestep-loop/</link><description>&lt;p&gt;There is a great article by Glenn Fiedler titled &lt;a class="reference external" href="http://gafferongames.com/game-physics/fix-your-timestep/"&gt;“Fix Your Timestep!”&lt;/a&gt; in
which the author explains various approaches to writing a game loop and
concludes with a loop that provides a fixed time step for simulation. If you
are not familiar with this topic go read the article first …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">HiPhish</dc:creator><pubDate>Sun, 16 Jul 2017 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:hiphish.github.io,2017-07-16:/blog/2017/07/16/functional-fixed-timestep-loop/</guid></item><item><title>Creating a mock REPL on Unix</title><link>http://hiphish.github.io/blog/2017/05/13/mock-repl-unix/</link><description>&lt;p&gt;During the development of &lt;a class="reference external" href="https://gitlab.com/HiPhish/repl.nvim/"&gt;REPL.nvim&lt;/a&gt; I had to be able to test the plugin
without relying on any particular REPL present on the development system. The
solution was to create a mock REPL, a shell script which acts like a really
dumb REPL. Here is the code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;EOF&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;false …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">HiPhish</dc:creator><pubDate>Sat, 13 May 2017 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:hiphish.github.io,2017-05-13:/blog/2017/05/13/mock-repl-unix/</guid></item><item><title>Introducing REPL.nvim</title><link>http://hiphish.github.io/blog/2017/05/06/introducing-repl-nvim/</link><description>&lt;p&gt;Integrating a REPL in Vim has been a difficult issue in the past, but with
Nvim's built-in terminal emulator it is just a few commands away. My new
&lt;a class="reference external" href="https://gitlab.com/HiPhish/repl.nvim/"&gt;REPL.nvim&lt;/a&gt; plugin now puts the REPL only one command away, for any
programming language you wish. The end goal is to …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">HiPhish</dc:creator><pubDate>Sat, 06 May 2017 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:hiphish.github.io,2017-05-06:/blog/2017/05/06/introducing-repl-nvim/</guid><category>vim</category></item><item><title>Outlining of HTML pages is fundamentally broken</title><link>http://hiphish.github.io/blog/2017/04/25/html-outline-fundamentally-broken/</link><description>&lt;p&gt;If you were to run the Workshop through an HTML validator you would notice a
lot of warnings about the document outline. What is going on here? HTML 5
defines an &lt;a class="reference external" href="https://www.w3.org/TR/html5/sections.html#outline"&gt;outline algorithm&lt;/a&gt; which allows browsers and assistive
technologies to create an outline of the page. In theory a blind …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">HiPhish</dc:creator><pubDate>Tue, 25 Apr 2017 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:hiphish.github.io,2017-04-25:/blog/2017/04/25/html-outline-fundamentally-broken/</guid><category>html</category><category>rant</category><category>outline</category></item><item><title>Introducing info.vim</title><link>http://hiphish.github.io/blog/2016/11/20/introducing-infovim/</link><description>&lt;p&gt;There  is a  new project  up at  the Workshop:  &lt;a class="reference external" href="https://gitlab.com/HiPhish/info.vim"&gt;info.vim&lt;/a&gt;, a  Vim plugin  which
implements a  complete reader and browser  for info documents from  within Vim.
This is similar to the standalone &lt;code&gt;info&lt;/code&gt; program or the Emacs info mode.&lt;/p&gt;
&lt;p&gt;Info documents  are generally produced by  the &lt;a class="reference external" href="https://www.gnu.org/software/texinfo/"&gt;Texinfo&lt;/a&gt; program, which …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">HiPhish</dc:creator><pubDate>Sun, 20 Nov 2016 00:00:00 +0100</pubDate><guid isPermaLink="false">tag:hiphish.github.io,2016-11-20:/blog/2016/11/20/introducing-infovim/</guid><category>vim</category><category>info</category></item><item><title>Rewriting the Workshop</title><link>http://hiphish.github.io/blog/2016/09/27/rewriting-the-workshop/</link><description>&lt;p&gt;At this point I  could start to make rewriting  my website an annual tradition.
There have been a number of little  details that have been rubbing me the wrong
way for almost a year now;  the biggest one was the navigation bar on sub-sites
like the  Grid Framework  product site …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">HiPhish</dc:creator><pubDate>Tue, 27 Sep 2016 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:hiphish.github.io,2016-09-27:/blog/2016/09/27/rewriting-the-workshop/</guid><category>website</category></item><item><title>Introducing IPS-Tools</title><link>http://hiphish.github.io/blog/2016/07/06/intro-ips-tools/</link><description>&lt;p&gt;I found myself needing a program to apply binary patches in the IPS file format
and I was really disappointed  that there are no proper  Unix programs for that
purpose available.  So I set out to make my own,  but instead of just  applying
patches it would be a complete …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">HiPhish</dc:creator><pubDate>Wed, 06 Jul 2016 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:hiphish.github.io,2016-07-06:/blog/2016/07/06/intro-ips-tools/</guid></item><item><title>Highlighting NSImageView the right way</title><link>http://hiphish.github.io/blog/2016/06/25/highlighting-nsimageview/</link><description>&lt;p&gt;Recently  I have  been working on  a small Cocoa  app and one  of the  things I
needed to do was highlight an  &lt;code&gt;NSImageView&lt;/code&gt; when the user is hovering above it
while dragging a file.  You would think  that it's a very simple task,  and you
would be right, but judging …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">HiPhish</dc:creator><pubDate>Sat, 25 Jun 2016 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:hiphish.github.io,2016-06-25:/blog/2016/06/25/highlighting-nsimageview/</guid><category>cocoa</category></item><item><title>Introducing NTFS-Clone</title><link>http://hiphish.github.io/blog/2016/05/31/into-ntfs-clone/</link><description>&lt;p&gt;This is  a very  useful project  I had  written quite  a while  ago at work and
recently found collecting dust on my hard drive. It lets you create perfect 1:1
copies of NTFS hard drives on Unix.  The problem with every software I had come
across was  that it …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">HiPhish</dc:creator><pubDate>Tue, 31 May 2016 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:hiphish.github.io,2016-05-31:/blog/2016/05/31/into-ntfs-clone/</guid></item><item><title>Neovim has tab-local working directories now</title><link>http://hiphish.github.io/blog/2016/04/22/neovim-tcd/</link><description>&lt;p&gt;My Neovim PR to add tab-local working directories has recently been merged.  In
this post I will explain what it does and why you will love it.&lt;/p&gt;
&lt;div class="section" id="what-are-working-directories-in-vim"&gt;
&lt;h2&gt;What are working directories in Vim?&lt;/h2&gt;
&lt;p&gt;If you know Vim  feel free to skip  this section,  otherwise read on.  Vim is a
terminal …&lt;/p&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">HiPhish</dc:creator><pubDate>Fri, 22 Apr 2016 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:hiphish.github.io,2016-04-22:/blog/2016/04/22/neovim-tcd/</guid><category>vim</category></item><item><title>Feeds are live now</title><link>http://hiphish.github.io/blog/2015/11/14/feeds-live-now/</link><description>&lt;p&gt;RSS- and Atom feeds are live now. You can subscribe to an entire blog using the
links in the navigator or you can subscribe to a particular category in a blog.
For that navigate to the category using either the navigator or by clicking the
category button of an article …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">HiPhish</dc:creator><pubDate>Sat, 14 Nov 2015 00:00:00 +0100</pubDate><guid isPermaLink="false">tag:hiphish.github.io,2015-11-14:/blog/2015/11/14/feeds-live-now/</guid><category>website</category></item><item><title>We are live!</title><link>http://hiphish.github.io/blog/2015/11/11/we-are-live/</link><description>&lt;p&gt;The Workshop blog is finally up and running, in all its static glory. This
makes the site practically complete, at least as complete as a website can ever
be anyway. It also works great with my &lt;a class="reference external" href="https://gitlab.com/HiPhish/Multiblog-Pelican"&gt;Multiblog&lt;/a&gt; plugin.&lt;/p&gt;
&lt;p&gt;I wanted to be able to have more than one blog on …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">HiPhish</dc:creator><pubDate>Wed, 11 Nov 2015 00:00:00 +0100</pubDate><guid isPermaLink="false">tag:hiphish.github.io,2015-11-11:/blog/2015/11/11/we-are-live/</guid><category>website</category></item></channel></rss>