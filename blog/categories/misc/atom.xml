<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>HiPhish's Workshop - misc</title><link href="http://hiphish.github.io/" rel="alternate"></link><link href="http://192.168.0.190:8000/blog/categories/misc/atom.xml" rel="self"></link><id>http://hiphish.github.io/</id><updated>2017-05-13T00:00:00+02:00</updated><entry><title>Creating a mock REPL on Unix</title><link href="http://hiphish.github.io/blog/2017/05/13/mock-repl-unix/" rel="alternate"></link><published>2017-05-13T00:00:00+02:00</published><updated>2017-05-13T00:00:00+02:00</updated><author><name>HiPhish</name></author><id>tag:hiphish.github.io,2017-05-13:/blog/2017/05/13/mock-repl-unix/</id><summary type="html">&lt;p&gt;During the development of &lt;a class="reference external" href="https://gitlab.com/HiPhish/repl.nvim/"&gt;REPL.nvim&lt;/a&gt; I had to be able to test the plugin
without relying on any particular REPL present on the development system. The
solution was to create a mock REPL, a shell script which acts like a really
dumb REPL. Here is the code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;EOF&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;false …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;During the development of &lt;a class="reference external" href="https://gitlab.com/HiPhish/repl.nvim/"&gt;REPL.nvim&lt;/a&gt; I had to be able to test the plugin
without relying on any particular REPL present on the development system. The
solution was to create a mock REPL, a shell script which acts like a really
dumb REPL. Here is the code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;EOF&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt;

&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'This is a dummy REPL, it does nothing and comes with no warranty.'&lt;/span&gt;
&lt;span class="k"&gt;until&lt;/span&gt; &lt;span class="nv"&gt;$EOF&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
        &lt;span class="nb"&gt;printf&lt;/span&gt; &lt;span class="s1"&gt;'&amp;gt;&amp;gt;&amp;gt; '&lt;/span&gt;
        &lt;span class="nb"&gt;read&lt;/span&gt; -r &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nv"&gt;EOF&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'true'&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; ! &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$REPLY&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt; &lt;span class="k"&gt;continue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;fi&lt;/span&gt;
        &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$REPLY&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
&lt;span class="k"&gt;done&lt;/span&gt;
&lt;span class="c1"&gt;# Terminating new line if there was no reply&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; ! &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$REPLY&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt; &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;''&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;fi&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The first line is a simple state variable which will be set to &lt;code&gt;true&lt;/code&gt; once the
user presses &lt;code&gt;^D&lt;/code&gt;. As long as the variable remains &lt;code&gt;false&lt;/code&gt; the loop will keep
running.&lt;/p&gt;
&lt;p&gt;Next comes the actual &lt;em&gt;Loop&lt;/em&gt; part of the REPL; it prints a prompt and then
reads a line indefinitely. The &lt;em&gt;Read&lt;/em&gt; part is implemented using the built-in
&lt;code&gt;read&lt;/code&gt; to store the result in the implicit variable &lt;code&gt;$REPLY&lt;/code&gt;. Should &lt;code&gt;read&lt;/code&gt;
read &lt;code&gt;^D&lt;/code&gt; the exist code will be non-zero, causing the conditional &lt;code&gt;||&lt;/code&gt; to set
the &lt;code&gt;EOF&lt;/code&gt; variable to &lt;code&gt;true&lt;/code&gt;. This is our exit mechanism out of the REPL. There
is no &lt;em&gt;Evaluate&lt;/em&gt; part since this is a mock REPL (or you could say that any
input evaluates to itself). Finally the &lt;em&gt;Print&lt;/em&gt; part is implemented by using
&lt;code&gt;echo&lt;/code&gt; to echo back the input.&lt;/p&gt;
&lt;p&gt;Technically the REPL could also be implemented with less code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;EOF&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt;
&lt;span class="k"&gt;until&lt;/span&gt; &lt;span class="nv"&gt;$EOF&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
        &lt;span class="nb"&gt;printf&lt;/span&gt; &lt;span class="s1"&gt;'&amp;gt;&amp;gt;&amp;gt; '&lt;/span&gt;
        &lt;span class="nb"&gt;read&lt;/span&gt; -r &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nv"&gt;EOF&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'true'&lt;/span&gt;
        &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$REPLY&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
&lt;span class="k"&gt;done&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The additional code is just to give the REPL some extra polish. It's not really
needed if no human will never use it, but I like the extra touch. The first
line&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; ! &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$REPLY&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt; &lt;span class="k"&gt;continue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;fi&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;prevents the loop from reaching the &lt;code&gt;echo&lt;/code&gt; if &lt;code&gt;$REPLY&lt;/code&gt; is an empty string.
Without it if the user does not enter any text an empty line would be printed:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
# Without extra touch
&amp;gt;&amp;gt;&amp;gt; foo
foo
&amp;gt;&amp;gt;&amp;gt;

&amp;gt;&amp;gt;&amp;gt; bar
bar

# With textra touch
&amp;gt;&amp;gt;&amp;gt; foo
foo
&amp;gt;&amp;gt;&amp;gt;
&amp;gt;&amp;gt;&amp;gt; bar
bar
&lt;/pre&gt;
&lt;p&gt;The other line&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; ! &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$REPLY&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt; &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;''&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;fi&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;causes &lt;code&gt;echo&lt;/code&gt; to display an empty string. This empty string will move the shell
prompt onto the next line:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
# Without extra polish
sh-3.2$ sh mock-repl.sh
This is a dummy REPL, it does nothing and comes with no warranty.
&amp;gt;&amp;gt;&amp;gt; foo
foo
&amp;gt;&amp;gt;&amp;gt; sh-3.2$

# With extra polish
sh-3.2$ sh mock-repl.sh
This is a dummy REPL, it does nothing and comes with no warranty.
&amp;gt;&amp;gt;&amp;gt; foo
foo
&amp;gt;&amp;gt;&amp;gt; ^D
sh-3.2$
&lt;/pre&gt;
&lt;p&gt;The mock REPL can then be invoked like any other shell script and be used in
place of a real REPL program when testing. That way we do not have to be wary
of any side effects and the developer does not need to have any particular
program installed on their system.&lt;/p&gt;
</content></entry><entry><title>Outlining of HTML pages is fundamentally broken</title><link href="http://hiphish.github.io/blog/2017/04/25/html-outline-fundamentally-broken/" rel="alternate"></link><published>2017-04-25T00:00:00+02:00</published><updated>2017-04-25T00:00:00+02:00</updated><author><name>HiPhish</name></author><id>tag:hiphish.github.io,2017-04-25:/blog/2017/04/25/html-outline-fundamentally-broken/</id><summary type="html">&lt;p&gt;If you were to run the Workshop through an HTML validator you would notice a
lot of warnings about the document outline. What is going on here? HTML 5
defines an &lt;a class="reference external" href="https://www.w3.org/TR/html5/sections.html#outline"&gt;outline algorithm&lt;/a&gt; which allows browsers and assistive
technologies to create an outline of the page. In theory a blind …&lt;/p&gt;</summary><content type="html">&lt;p&gt;If you were to run the Workshop through an HTML validator you would notice a
lot of warnings about the document outline. What is going on here? HTML 5
defines an &lt;a class="reference external" href="https://www.w3.org/TR/html5/sections.html#outline"&gt;outline algorithm&lt;/a&gt; which allows browsers and assistive
technologies to create an outline of the page. In theory a blind person could
ask their reader for the outline of the page and get a sort of table of
contents which they could use to quickly jump to a specific part of the page.&lt;/p&gt;
&lt;p&gt;The problem is the “in theory” part. The outline algorithm has not been
implemented in any of the common browsers and it probably &lt;a class="reference external" href="http://html5doctor.com/computer-says-no-to-html5-document-outline/"&gt;never will be&lt;/a&gt;.
Instead authors are supposed to use the rank of headings &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; through &lt;code&gt;&amp;lt;h6&amp;gt;&lt;/code&gt;
to convey the outline of the document, which is a fundamentally broken concept.&lt;/p&gt;
&lt;div class="section" id="html-does-not-know-what-it-wants-to-be"&gt;
&lt;h2&gt;HTML does not know what it wants to be&lt;/h2&gt;
&lt;p&gt;HTML was originally an application of &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Standard_Generalized_Markup_Language"&gt;SGML&lt;/a&gt;, it was meant to mark up documents.
As such the concept of &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; through &lt;code&gt;&amp;lt;h6&amp;gt;&lt;/code&gt; made sense. The contents of the
document would be inside the &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; and would flow in a one-dimensional way
from top to bottom.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;About Grid Framework&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  Lorem ipsum...

  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h2&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Advantages of Grid Framework&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h2&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h3&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Advantages over other solutions&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h3&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  Lorem ipsum...

  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h3&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Advantages over self-made solutions&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h3&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  Lorem ipsum...

  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h2&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Features of Grid Framework&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h2&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  Lorem ipsum...
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The number of ranks was hard-coded, but six is enough for a document. The
headings could be used as targets to jump to, and since the document is
one-dimensional there is no ambiguity as to what belongs under which heading.&lt;/p&gt;
&lt;p&gt;Of course a product website that looks like it was written in a word processor
does not look appealing, so people began stretching HTML beyond what it was
meant to be. If you look at the source code of the Workshop you will see that
everything is built in a tree-like fashion. You have sections within sections,
multiple navigation items, and two-dimensional layout (some sites even have
three-dimensional layout with popup elements).&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="html-sectioning-tags-solve-the-problem"&gt;
&lt;h2&gt;HTML sectioning tags solve the problem&lt;/h2&gt;
&lt;p&gt;Prior to HTML 5 this lead to &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;-itis, where the page was littered with
&lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; elements with no semantic meaning. This is bad, HTML is supposed to be
all about the content, not the layout. HTML 5 added semantic sectioning, which
solved the problem: the one-dimensional structure was abandoned in favour of a
tree-based structure. Authors can still write classic one-dimensional
documents, but they can also structure the page in terms of sections where
sections can contain any number of sub-sections:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;header&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;img&lt;/span&gt; &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"logo.svg"&lt;/span&gt;&lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;nav&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      ...
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;nav&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;header&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;section&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;header&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;...&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;header&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;main&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      ...
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;main&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;nav&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      ...
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;nav&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;aside&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      ...
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;aside&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;section&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;footer&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    ...
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;footer&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;What about the outline though? Now I know that there is some page element for
navigation, but which kind of navigation is it? This information is conveyed by
the old heading elements. Simple enough, just add a &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; as the first child
of the section and you are good to go. At least that is how it is supposed to
work in theory.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-problem-with-hard-coded-heading-ranks"&gt;
&lt;h2&gt;The problem with hard-coded heading ranks&lt;/h2&gt;
&lt;p&gt;Ideally the rank of the heading does not matter to the outline algorithm. We
could use a &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; for every section and the algorithm would count the section
instead of looking at the rank. Unfortunately this is not implemented in any of
the major browsers and the &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; is treated as a page-wide top-level heading.
In other words, the nesting of our sections is lost and the outline is
completely flat.&lt;/p&gt;
&lt;p&gt;If you look at the simple example above you will notice that the &lt;code&gt;&amp;lt;main&amp;gt;&lt;/code&gt; is a
rank three element, so its proper heading would need to be &lt;code&gt;&amp;lt;h3&amp;gt;&lt;/code&gt;. This leaves
only three more ranks of headings for the contents of the &lt;code&gt;&amp;lt;main&amp;gt;&lt;/code&gt;. We are
still using the old one-dimensional outline method for multi-dimensional
content.&lt;/p&gt;
&lt;div class="section" id="lack-of-heading-ranks"&gt;
&lt;h3&gt;Lack of heading ranks&lt;/h3&gt;
&lt;p&gt;The code snippet I provided was a very simple example, in reality nesting can
go even deeper. Take the Grid Framework news blog: the list of articles has
rank four, and every article preview has rank five. If there is a heading in
the article preview itself that‘s already at rank six, the lowest rank possible
in HTML. One might argue that I should not have built so many ranks in the
first place, but I disagree; the top level (1) is the common structure for the
entire site, the next level (2) is the Grid Framework sub-site, followed by the
blog structure (3), which contains the list of articles (4). This is all
logical nesting based on the hierarchy of the page within the site.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="hard-coded-headings-break-article"&gt;
&lt;h3&gt;Hard-coded headings break &lt;code&gt;&amp;lt;article&amp;gt;&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;The problem becomes even more glaring when you consider that an &lt;code&gt;&amp;lt;article&amp;gt;&lt;/code&gt;
element is supposed to be an element that can stand on its own without the
surrounding content, such as a blog post, a comment or a product card. If the
article cannot have a rank one heading, then it can never stand on its own.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="automation-concerns"&gt;
&lt;h3&gt;Automation concerns&lt;/h3&gt;
&lt;p&gt;This is also a problem with automatic generation of pages. Take this post as an
example: while writing it I should not have to concern myself with the question
of what ranks the headings will have to have in the surrounding page. In fact,
I cannot do that, because after changing the template or uploading the post to
another service or running it through a converter the surrounding ranks could
be completely different, or the concept of surrounding ranks might not even be
applicable. Furthermore, what if I run out of ranks? This article already has
three ranks of titles, now imagine If I wanted to publish actual in-depth
documents.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="how-could-the-problem-be-solved"&gt;
&lt;h2&gt;How could the problem be solved?&lt;/h2&gt;
&lt;p&gt;The &lt;a class="reference external" href="http://html5doctor.com/computer-says-no-to-html5-document-outline/#comment-2130593"&gt;last comment&lt;/a&gt; in the &lt;a class="reference external" href="http://html5doctor.com/computer-says-no-to-html5-document-outline/"&gt;above linked&lt;/a&gt; article describes a good solution:
use the nesting of a section for the global rank and use &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; through &lt;code&gt;&amp;lt;h6&amp;gt;&lt;/code&gt;
for local ranks within that section. Every section would begin with a &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt;
and could contain lesser ranks, but the effective rank of each heading would be
the sum of the section‘s rank and the rank of the heading. This way it would be
possible to structure pages multi-dimensionally, but still use a
one-dimensional structure &lt;em&gt;inside&lt;/em&gt; a section.&lt;/p&gt;
&lt;p&gt;Taking this blog post as an example again, my generator would use the headings
&lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; through &lt;code&gt;&amp;lt;h6&amp;gt;&lt;/code&gt; and the browser would figure out the true rank of a
heading based on how deep the post is actually nested inside the page.
Furthermore, since this post is an &lt;code&gt;&amp;lt;article&amp;gt;&lt;/code&gt; it could be cropped out of the
page and still make sense on its own.&lt;/p&gt;
&lt;p&gt;So what should I do with the Workshop in the meantime? Nothing. I‘m sorry, but
the current one-dimensional ranking system simply cannot be made to work with
this design. In order to make it work I would have to throw away most of the
tree-based design in favour of a flat design with barely no structure. The cost
does no outweigh the benefits. Browser manufacturers need to get their houses
in order, it cannot be that we have WebAssembly and WebGL shaders in our
browsers, but no way of generating an outline for blind people. This is really
telling about where their priorities lie.&lt;/p&gt;
&lt;p&gt;And before anyone decides to call me unprofessional for this attitude, try
outlining the websites of some of the larger companies who hire professional
web designers to work on their sites and see what the result looks like.&lt;/p&gt;
&lt;/div&gt;
</content><category term="html"></category><category term="rant"></category><category term="outline"></category></entry><entry><title>Introducing info.vim</title><link href="http://hiphish.github.io/blog/2016/11/20/introducing-infovim/" rel="alternate"></link><published>2016-11-20T00:00:00+01:00</published><updated>2016-11-20T00:00:00+01:00</updated><author><name>HiPhish</name></author><id>tag:hiphish.github.io,2016-11-20:/blog/2016/11/20/introducing-infovim/</id><summary type="html">&lt;p&gt;There  is a  new project  up at  the Workshop:  &lt;a class="reference external" href="https://gitlab.com/HiPhish/info.vim"&gt;info.vim&lt;/a&gt;, a  Vim plugin  which
implements a  complete reader and browser  for info documents from  within Vim.
This is similar to the standalone &lt;code&gt;info&lt;/code&gt; program or the Emacs info mode.&lt;/p&gt;
&lt;p&gt;Info documents  are generally produced by  the &lt;a class="reference external" href="https://www.gnu.org/software/texinfo/"&gt;Texinfo&lt;/a&gt; program, which …&lt;/p&gt;</summary><content type="html">&lt;p&gt;There  is a  new project  up at  the Workshop:  &lt;a class="reference external" href="https://gitlab.com/HiPhish/info.vim"&gt;info.vim&lt;/a&gt;, a  Vim plugin  which
implements a  complete reader and browser  for info documents from  within Vim.
This is similar to the standalone &lt;code&gt;info&lt;/code&gt; program or the Emacs info mode.&lt;/p&gt;
&lt;p&gt;Info documents  are generally produced by  the &lt;a class="reference external" href="https://www.gnu.org/software/texinfo/"&gt;Texinfo&lt;/a&gt; program, which  is also
the official documentation format for the GNU project. This means that a lot of
important manuals, such  as the Bourne Again Shell user  manual, are written in
this format. One could  read the manual in HTML or PDF,  but that means leaving
the editor and  interrupting the workflow. Another alternative would  be to run
standalone &lt;code&gt;info&lt;/code&gt; from within a Neovim terminal buffer, but even that's more of
a workaround than a  real solution, plus you have to  learn the weird interface
of standalone  &lt;code&gt;info&lt;/code&gt;. Until  now Vim  users had  no real  way of  reading info
documents without interruption.&lt;/p&gt;
&lt;div class="section" id="a-new-info-reader"&gt;
&lt;h2&gt;A new info reader&lt;/h2&gt;
&lt;p&gt;The best way to get  and idea of info.vim is to see it  right in action in this
asccicast:&lt;/p&gt;
&lt;a class="reference external image-reference" href="https://asciinema.org/a/92884"&gt;&lt;img alt="Screencast of using Info.vim" class="img-responsive align-center" src="https://asciinema.org/a/92884.png" style="width: 50%;"/&gt;&lt;/a&gt;
&lt;p&gt;Opening the manual to the Bourne Again Shell is as easy as typing&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;Info bash
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;on the Vim command line. Similar to  standalone &lt;code&gt;info&lt;/code&gt; you can also give a node
to jump to:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;Info bash introduction
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Info.vim uses the same way of finding  files and nodes as standalone &lt;code&gt;info&lt;/code&gt;, so
even  a short  form like  &lt;code&gt;:Info bash intro&lt;/code&gt;  would  find the  right node.  The
command will open a new window or  use an existing window, similar to how Vim's
&lt;code&gt;:help&lt;/code&gt; works.  You can even  use the same  modifier like &lt;code&gt;:vertical&lt;/code&gt;,  it will
works exactly as you would expect.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="navigating-info-documents"&gt;
&lt;h2&gt;Navigating info documents&lt;/h2&gt;
&lt;p&gt;Of course reading a  node of the manual is only half  of what an implementation
of info  should provide.  The other  half is navigating  the manual.  For every
navigation  a corresponding  Vim command  is provided:  &lt;code&gt;:InfoUp&lt;/code&gt;, &lt;code&gt;:InfoNext&lt;/code&gt;,
&lt;code&gt;:InfoPrev&lt;/code&gt;,  &lt;code&gt;:Menu&lt;/code&gt;,   &lt;code&gt;:Follow&lt;/code&gt;  and   &lt;code&gt;:GotoNode&lt;/code&gt;.  All   commands  support
tab-completion (where  applicable) and there  is a  prompt version of  each one
that can be mapped to a key by the user:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;nmap &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;buffer&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; gu &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;Plug&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;InfoUp
nmap &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;buffer&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; gn &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;Plug&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;InfoNext
nmap &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;buffer&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;gp&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;Plug&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;InfoPrev
nmap &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;buffer&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; gm &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;Plug&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;InfoMenu
nmap &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;buffer&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; gf &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;Plug&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;InfoFollow
nmap &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;buffer&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;go&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;Plug&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;InfoGoto
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="advanced-info"&gt;
&lt;h2&gt;Advanced info&lt;/h2&gt;
&lt;p&gt;For those who like  to dig deeper into the meat and build  their own scripts on
top of  info.vim there are two  very handy features: the  &lt;code&gt;b:info&lt;/code&gt; variable and
info URIs. &lt;code&gt;b:info&lt;/code&gt;  is a buffer-local dictionary that  holds information about
the current node, such  as sibling nodes, its file or a list  of menu items. An
info URI  is a  special URI  that can be  used to  identify info  documents. By
executing&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;" We had to escape the '%' with '\%' because of Vim&lt;/span&gt;
&lt;span class="p"&gt;:&lt;/span&gt;edit info:&lt;span class="sr"&gt;//&lt;/span&gt;bash.info&lt;span class="sr"&gt;/What\%20is\%20Bash\%3f/&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;you will  open the corresponding node  right in your current  window. Much like
with the &lt;code&gt;:Info&lt;/code&gt; command you can  also use a short URI like &lt;code&gt;info://bash/what&lt;/code&gt;.
Info.vim  is clever  and will  normalise  your URI  so  you don't  end up  with
multiple buffers all displaying the same content. With this of normalisation in
place we can  even add extra information  to the URI's query, like  a line- and
column number:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;edit info:&lt;span class="sr"&gt;/bash.info/&lt;/span&gt;What\%&lt;span class="m"&gt;20&lt;/span&gt;is\%&lt;span class="m"&gt;20&lt;/span&gt;Bash\%&lt;span class="m"&gt;3&lt;/span&gt;f/?line&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&amp;amp;column&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="m"&gt;7&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So go ahead, download info.vim and browse all those info manuals that have been
collecting dust  on your  hard drive  so far,  and don't  forget to  report any
issues you might come across.&lt;/p&gt;
&lt;/div&gt;
</content><category term="vim"></category><category term="info"></category></entry><entry><title>Highlighting NSImageView the right way</title><link href="http://hiphish.github.io/blog/2016/06/25/highlighting-nsimageview/" rel="alternate"></link><published>2016-06-25T00:00:00+02:00</published><updated>2016-06-25T00:00:00+02:00</updated><author><name>HiPhish</name></author><id>tag:hiphish.github.io,2016-06-25:/blog/2016/06/25/highlighting-nsimageview/</id><summary type="html">&lt;p&gt;Recently  I have  been working on  a small Cocoa  app and one  of the  things I
needed to do was highlight an  &lt;code&gt;NSImageView&lt;/code&gt; when the user is hovering above it
while dragging a file.  You would think  that it's a very simple task,  and you
would be right, but judging …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Recently  I have  been working on  a small Cocoa  app and one  of the  things I
needed to do was highlight an  &lt;code&gt;NSImageView&lt;/code&gt; when the user is hovering above it
while dragging a file.  You would think  that it's a very simple task,  and you
would be right, but judging by some of the things on the internet it looks like
an unsolved problem.&lt;/p&gt;
&lt;p&gt;The difficult part about Mac development is not Objective-C, if you know C then
you can learn  Objective-C in a  few days.  The hard part is Cocoa.  Cocoa is a
very old framework,  older than .NET, Java and macOS.  A framework  this old is
guaranteed to have grown a lot  over the years and finding what you are looking
for can  be a  daunting task.  Even Apple's  own documentation  is filled  with
deprecated API calls or downright bad practice.&lt;/p&gt;
&lt;div class="section" id="the-wrong-way"&gt;
&lt;h2&gt;The wrong way&lt;/h2&gt;
&lt;p&gt;Here is how Apple's own documentation highlights an &lt;code&gt;NSImageView&lt;/code&gt; instance. The
code is from the official &lt;a class="reference external" href="https://developer.apple.com/library/mac/samplecode/CocoaDragAndDrop/Introduction/Intro.html"&gt;CocoaDragAndDrop&lt;/a&gt; example.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;-(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;drawRect:&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NSRect&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nv"&gt;rect&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="cm"&gt;/*------------------------------------------------------&lt;/span&gt;
&lt;span class="cm"&gt;        draw method is overridden to do drop highlighing&lt;/span&gt;
&lt;span class="cm"&gt;    --------------------------------------------------------*/&lt;/span&gt;
    &lt;span class="c1"&gt;//do the usual draw operation to display the image&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;super&lt;/span&gt; &lt;span class="nl"&gt;drawRect&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;rect&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;highlight&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;//highlight by overlaying a gray border&lt;/span&gt;
        &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="n"&gt;NSColor&lt;/span&gt; &lt;span class="n"&gt;grayColor&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;set&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;NSBezierPath&lt;/span&gt; &lt;span class="nl"&gt;setDefaultLineWidth&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;NSBezierPath&lt;/span&gt; &lt;span class="nl"&gt;strokeRect&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rect&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;There are other  implementations on the internet,  but those can be excused for
not being official. They all have the same fundamental problem anyway,  so I'll
just use this one for illustration.&lt;/p&gt;
&lt;p&gt;The implementation  looks simple  enough and works,  but only  as long  as your
&lt;code&gt;NSImageView&lt;/code&gt; instance satisfies the assumptions made here.  We assume that our
view object will always have  the outline of a rectangle and we assume that the
chosen colour  will always  be adequate.  In my  case the first  assumption was
already broken from the start because I was using the &lt;em&gt;Bezel&lt;/em&gt; style for my view
objects, a style that is part of Cocoa itself. There is also no telling when in
the future Apple might change the default colours, making your choice of colour
inadequate. And that's not even going into portability if you want to use
GNUStep to port your app to other operating systems.&lt;/p&gt;
&lt;p&gt;What we want is an abstraction.  Abstractions provide us with a clean interface
that can remain stable while  the underlying implementation  can change wildly.
Cocoa has abstractions everywhere, such as using &lt;code&gt;NSURL&lt;/code&gt; for file paths instead
of C  strings  or even &lt;code&gt;NSString&lt;/code&gt;.  Doing things  your own  way should  only be
reserved for when  you actually have control over the underlying code.  So if I
were  to  draw my  own  shapes  for an  &lt;code&gt;NSView&lt;/code&gt; I  would  also  be comfortable
hard-coding my own highlighting.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-right-way"&gt;
&lt;h2&gt;The right way™&lt;/h2&gt;
&lt;p&gt;As it turns out  Cocoa already provides  us with the  means of abstraction  for
highlighting.  The &lt;code&gt;NSControl&lt;/code&gt; class has the &lt;code&gt;highlighted&lt;/code&gt; property,  which has
the getter &lt;code&gt;isHighlighted&lt;/code&gt;,  so we don't need  a new property.  For drawing the
actual highlight &lt;code&gt;NSView&lt;/code&gt;  provides the method &lt;code&gt;drawFocusRingMask&lt;/code&gt;.  Subclasses
can override  the property  to implement  their own  highlighting  and  luckily
&lt;code&gt;NSImageView&lt;/code&gt; does exacly that.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;drawRect:&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NSRect&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nv"&gt;dirtyRect&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;super&lt;/span&gt; &lt;span class="nl"&gt;drawRect&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;dirtyRect&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="nb"&gt;self&lt;/span&gt; &lt;span class="n"&gt;isHighlighted&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;self&lt;/span&gt; &lt;span class="n"&gt;drawFocusRingMask&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now your code is future-proof and will work regardless of the shape you choose.
Well, at least until Apple deprecates this method.&lt;/p&gt;
&lt;/div&gt;
</content><category term="cocoa"></category></entry></feed>