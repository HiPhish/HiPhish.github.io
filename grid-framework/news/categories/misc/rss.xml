<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>HiPhish's Workshop</title><link>http://hiphish.github.io/</link><description></description><lastBuildDate>Fri, 13 Jan 2017 00:00:00 +0100</lastBuildDate><item><title>Pretty examples</title><link>http://hiphish.github.io/grid-framework/news/2017/01/13/reworked-examples/</link><description>&lt;p&gt;The presentation  of Grid Framework has  been a sore  spot in my eyes  from day
one. Primitive  shapes are good enough  when prototyping, but when  you want to
sell something you  need to have that  extra "bang", or else  your product will
look like something thrown together over a weekend.&lt;/p&gt;
&lt;p&gt;This is why I have been spending time lately redoing the examples. If you click
one one of the playable examples on the website you will now see actual sprites
and textures  instead of Unity's  primitive shapes. The lights-out  example now
has  sprites of  light bulbs,  the movement  example has  a retro  tileset, the
terrain mesh construction example has a  repeating texture, and so on. What has
been a huge help is that Unity 5 supports sprites out of the box. This has made
supporting  2D images  a breeze  without having  to rely  on other  packages or
rolling my own like I had to in the past.&lt;/p&gt;
&lt;img alt="Screeshot of the Lights Out example" class="img-responsive" src="http://hiphish.github.io/grid-framework/news/2017/01/13/reworked-examples/lights-out.png"/&gt;
&lt;p&gt;You won't  be able  to find these  new examples in  Grid Framework  yet though,
there is already  an update awaiting approval  and if I were  to upload another
release it would  delay the pending one.  That's also the reason  why I haven't
update  the  screenshots either,  that  would  be  dangerously close  to  false
advertising at this point in time.&lt;/p&gt;
&lt;p&gt;One final note, the examples are now running in Unity's WebGL player instead of
the old  Unity web player.  That's a good thing  because it doesn't  require an
extra browser plugin from  the user, but it doesn't play  well with Pelican (my
static site  generator). For  now there  is no loading  progress bar  because I
would have to go through Unity's  progress bar implementation, and there is not
much documentation on that topic. Oh  well, another time then, the examples are
fortunately not large.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">HiPhish</dc:creator><pubDate>Fri, 13 Jan 2017 00:00:00 +0100</pubDate><guid isPermaLink="false">tag:hiphish.github.io,2017-01-13:grid-framework/news/2017/01/13/reworked-examples/</guid></item><item><title>Goodbye MonoDevelop, hello Vim</title><link>http://hiphish.github.io/grid-framework/news/2015/01/09/hello-vim/</link><description>&lt;p&gt;One thing that has been getting on my nerves ever since I started working with
Unity has been MonoDevelop. While it is a good IDE for the most part it
suffered from a number of annoying issues, such as folds randomly opening, poor
performance, and auto completion randomly not working. Your mileage may vary,
and for the most parts it was doing its job, but the annoying hiccups kept
happening all the time.&lt;/p&gt;
&lt;p&gt;I tried out the official Xamarin Studio, but that one didn't fare better and on
top of that always threw up error messages when opening a file. I was looking
into alternate editors, but they didn't offer the rich C#-focused feature set
of MonoDevelop, so I was stuck with it.&lt;/p&gt;
&lt;p&gt;Eventually I was so fed up, I decided to go all the way back: no fancy IDEs, no
GUIs, back to to bare basics: Vim. The cool thing about Vim is that's it's a
very simple barebones editor that can be extended and customised to your
liking. Vanilla Vim is nice, but you have not really used Vim until you have
tailored every aspect to your personal liking. That's a gradual process that
will take years of experience, but I do already feel very comfortable outside
of the hand-holding restrictions of the IDE.&lt;/p&gt;
&lt;p&gt;For an ideal Unity setup you will want a GUI client of Vim, such as MacVim.
That doesn't mean that Vim will get all those fancy buttons and menus, although
you can enable those if you want to, but the main advantage is that it can be
launched like any other application instead of through the terminal. MacVim has
also better mouse support (it's faster to resize windows with the mouse) and
the character cursor looks different in insert mode.&lt;/p&gt;
&lt;p&gt;The next thing you want is support for .Net and C# features. The plugin for
that is Omnisharp:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/OmniSharp/omnisharp-vim"&gt;https://github.com/OmniSharp/omnisharp-vim&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Omnisharp will add pretty much all features that you have come to love from
MonoDevelop, without the headache. Omnisharp also provides an interface for
other plugins, for example you can use it with YouCompleteMe to get automatic
code-completion:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/Valloric/YouCompleteMe"&gt;https://github.com/Valloric/YouCompleteMe&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;There is a ton of other useful plugins out there as well and some are listed on
Omnisharp's page. Another advantage of Vim is that it's not restricted to one
particular language or framework. You can easily write your essay or design
your HTML web page in it. Customisations can be set for each file type
differently or you can use them over multiple types. Since it's all one editor
you don't have to learn a new IDE for every project.&lt;/p&gt;
&lt;p&gt;In fact, I have been designing my new upcoming website in Vim as well, the same
editor I use for writing Grid Framework. How cool is that? Here is a video I
found on YouTube of someone using Vim to edit text with the speed of though:&lt;/p&gt;
&lt;div class="youtube youtube-16x9"&gt;&lt;iframe allowfullscreen="" frameborder="0" seamless="" src="https://www.youtube.com/embed/lQNFfhC4QI8"&gt;&lt;/iframe&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">HiPhish</dc:creator><pubDate>Fri, 09 Jan 2015 00:00:00 +0100</pubDate><guid isPermaLink="false">tag:hiphish.github.io,2015-01-09:grid-framework/news/2015/01/09/hello-vim/</guid><category>old-blog</category><category>rant</category></item><item><title>Whitelisting subdirectories in Git</title><link>http://hiphish.github.io/grid-framework/news/2014/09/09/whitelisting-in-git/</link><description>&lt;p&gt;After having migrated the development of Grid Framework to Git I wanted to set
it up to track only certain sub-directories. I turned out that whitelisting is
quite tricky, so here is how I did it for people who might run into the same
problem.&lt;/p&gt;
&lt;p&gt;We'll use only one .gitignore file and it will be placed in the root of our
repository, which is also the root of our project. We can do the usual
blacklisting stuff like blacklisting ceretain file types and directories, but
the Assets directory is where it gets tricky. Since the directory contains all
sorts of other plugins used during development but not worth tracking, we can
neither black- nor whitelist the entire directory.&lt;/p&gt;
&lt;p&gt;First we'll blacklist all the contents of the Assets directory. Note that this
does not blacklist the directory itself, just its contents, but since Git
operates on files the effect is the same. The difference is that blacklisting
an entire directory prevents us from ever whitelisting any of its contents.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
Assets/*
&lt;/pre&gt;
&lt;p&gt;Now we can whitelist a subdirectory and its meta file:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
!Assets/Grid\ Framework/
!Assets/Grid\ Framework.meta
&lt;/pre&gt;
&lt;p&gt;Simple enough, but what if we want to whitelist only a specific subdirectory of
a subdirectory? The Editor directory contains code from other plugins as well,
so we don't want to track the entire thing. In this case we need to repeat the
same process as above but one level deeper.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
!Assets/Editor/
!Assets/Editor.meta
Assets/Editor/*
!Assets/Editor/Grid\ Framework/
!Assets/Editor/Grid\ Framework.meta
&lt;/pre&gt;
&lt;p&gt;First we whitelist the Editor directory, then we immediately blacklist its
contents and whitelist a specific subdirectory. This way none of the other
editor extensions will be tracked. We can repeat the same process for the
Plugins directory.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
!Assets/Plugins/
!Assets/Plugins.meta
Assets/Plugins/*
!Assets/Plugins/Grid\ Framework/
!Assets/Plugins/Grid\ Framework.meta
&lt;/pre&gt;
&lt;p&gt;And yes, you do have to repeat all these steps for every level of
subdirectories. You don't have to whitelist subdirectories of already
whitelisted directories, so any subdirectory in &lt;tt class="docutils literal"&gt;Assets/Editor/Grid\
Framework/&lt;/tt&gt; is already tracked. Also note the backslash in the path, it is
necessay to escape the space character.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;UPDATE:&lt;/strong&gt; Whitelisted the Unity meta files of whitelisted folders as well,
just in case. Of course if you are not using Unity you need to figure out if
and what meta files you have instead and if they need to be tracked as well.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">HiPhish</dc:creator><pubDate>Tue, 09 Sep 2014 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:hiphish.github.io,2014-09-09:grid-framework/news/2014/09/09/whitelisting-in-git/</guid><category>old-blog</category><category>how-to</category></item><item><title>Status update and Doxygen rant</title><link>http://hiphish.github.io/grid-framework/news/2013/08/02/status-update/</link><description>&lt;p&gt;It has been two weeks snce my last update, so I wanted to let you guys know
what I am currently at. The good news is that the new coordinate systems have
been implemented and are ready to use. Of course there is still the obligatory
last check to do, but i expect everything to be fine. All methods that got the
axe are now gone as well and have been put into extension methods and ZIPped
into archives; that way no one will accidently use the deprecated API. I also
added a section called Legacy Support to the manual with instructions.&lt;/p&gt;
&lt;p&gt;Now for the promised rant. I have transitioned all the documentation to
Doxygen, both scripting reference and user manual. Now all that would be left
would be to sprinkle some CSS fairy dust on top of it so it looks nice and I'm
done. Except editing the CSS is an exercise in pure trial &amp;amp; error frustration,
there is no documentation for it and the code is barely commented. The manual
is a pain in the butt as well, it's like it was written for people who already
know how to use Doxygen. It will go into detail about all the possible ways of
formating my text, but it doesn't explain how to get the text into the manual
in a specific order. Don't worry, I got it all covered now, but it was not a
fun journey.&lt;/p&gt;
&lt;p&gt;I wanted to slim down the default HTML design, because I think the large header
buttons at the top are too large and vibrant, but I've had it with Doxygen.
Don't get me wrong, it's a great system and I'm sure everything made perfect
sense when wrting it, but it is obscure from the outside. Anyway, I'm going to
stick with the default design for now, but at least I limited the size of
images so they don't disrupt the flow of the text. There probably won't be any
PDF documentation anymore though, the HTML is more flexible to read and
navigate, plus the PDF generated by Doxygen looks rather... ugly.&lt;/p&gt;
&lt;p&gt;Now that I've got everything out of the way it's time to wrap it up and
hopefully get it released next week.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">HiPhish</dc:creator><pubDate>Fri, 02 Aug 2013 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:hiphish.github.io,2013-08-02:grid-framework/news/2013/08/02/status-update/</guid><category>old-blog</category><category>rant</category></item><item><title>CheckComponent()</title><link>http://hiphish.github.io/grid-framework/news/2013/07/03/check-component/</link><description>&lt;p&gt;Here is a quick but handy tip. Recently I found myself needing to reference
various components in my script without knowing if they exist. I have to get
the component and then check if it exists, and if not add it to prevent null
exceptions. Here is what you would write in such a case:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
MeshCollider mc = GetComponent&amp;lt;MeshCollider&amp;gt;();
if (!mc)
    mc = gameObject.AddComponent&amp;lt;MeshCollider&amp;gt;();
}
&lt;/pre&gt;
&lt;p&gt;First we get the component and store it in a variable, then if it is null we
add the component to the object. Simple, right? True, but if you need to do
this several times it can get messy. You can copy-paste it once with a
different type, but it gets tedious.&lt;/p&gt;
&lt;p&gt;Fortunately we can call generics to the rescue! Let's wrap it all up into one
generic function that works on any component:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
private T CheckComponent&amp;lt;T&amp;gt;() where T: Component {
    T component = GetComponent&amp;lt;T&amp;gt;();
    if (!component)
        component = gameObject.AddComponent&amp;lt;T&amp;gt;();
    return component;
}

MeshCollider mc = CheckComponent&amp;lt;MeshCollider&amp;gt;();
&lt;/pre&gt;
&lt;p&gt;Note that it is important for the type T to inherit from Component or else the
methods GetComponent and AddComponent don't make any sense and will throw
errors. We can take this even one step further by making CheckCompnent an
extension method:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
using UnityEngine;
using System.Collections;

public static class ComponentExtensions {
    public static T CheckComponent&amp;lt;T&amp;gt;(this Component theComponent) where T: Component {
        T component = theComponent.GetComponent&amp;lt;T&amp;gt;();
        if (!component)
            component = theComponent.gameObject.AddComponent&amp;lt;T&amp;gt;();
        return component;
    }
}
&lt;/pre&gt;
&lt;p&gt;Now you can call CheckComponent as if it were a part of Unity's standard API,
just like GetComponent.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
// use this in any of your scripts:
MeshCollider mc = CheckComponent&amp;lt;MeshCollider&amp;gt;();
&lt;/pre&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">HiPhish</dc:creator><pubDate>Wed, 03 Jul 2013 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:hiphish.github.io,2013-07-03:grid-framework/news/2013/07/03/check-component/</guid><category>old-blog</category><category>how-to</category></item><item><title>Unity and properties/accessors</title><link>http://hiphish.github.io/grid-framework/news/2013/02/14/properties-accessors/</link><description>&lt;p&gt;As mentioned in the previous post I'd like to relate my experience with using
properties in Unity and how to make them work properly. Properties are a C#
feature and not available in UnityScript (another reason to ditch UnityScript).
To help demonstrate what I mean I will be using a "circle" class.&lt;/p&gt;
&lt;pre class="code csharp literal-block"&gt;
&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Circle&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;radius&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;div class="section" id="what-are-properties"&gt;
&lt;h2&gt;What are properties?&lt;/h2&gt;
&lt;p&gt;As we can see radius is public and there is nothing stopping someone from
putting in nonsensical values like negative numbers. Since we are in Euclidean
geometry there is no such thing as "anti-length" and we need some way to
restrict the value of radius to positive numbers. One solution would be to make
radius a pivate member and use getters and setters:&lt;/p&gt;
&lt;pre class="code csharp literal-block"&gt;
&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Circle&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;_radius&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;SetRadius&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="k"&gt;value&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="n"&gt;_radius&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Mathf&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="nf"&gt;GetRadius&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;_radius&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;(the underscore in front of radius is there to mark it as a member variable;
it's just a convention, not mandatory) This gets the job done, but it's ugly
and bloats the syntax. What we need instead is some sort of variable/function
hybrid that acts like a messenger. This is where properties come in. Here is
the same code as above, except using properties:&lt;/p&gt;
&lt;pre class="code csharp literal-block"&gt;
&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Circle&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;_radius&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;radius&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;_radius&lt;/span&gt;&lt;span class="p"&gt;;}&lt;/span&gt;
        &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;_radius&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Mathf&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;The property looks like a function that missing the brackets for parameters and
it is treated like a variable in coding. Whenever we assign a value to it by
using the "=" sign we actually call the set and when we use it in computation
we call the get. value always refers to the value on the right hand side of the
"=" sign. Here is an example:&lt;/p&gt;
&lt;pre class="code csharp literal-block"&gt;
&lt;span class="n"&gt;myCircle&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;radius&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;//calls set and sets _radius to 0
&lt;/span&gt;&lt;span class="n"&gt;Debug&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;myCircle&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;radius&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//calls get and returns 0&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="why-should-you-use-properties"&gt;
&lt;h2&gt;Why should you use properties?&lt;/h2&gt;
&lt;p&gt;As you can see accessors allow us to expose member variables in a controlled
fashion. You can put up restrictions on what a certain variable can hold. You
can also create read-only "variables" by omitting the set part. Let's say your
circle class has several formulae using the circumference and you don't want to
type the formula every time. Here is what it would look like using an accessor:&lt;/p&gt;
&lt;pre class="code csharp literal-block"&gt;
&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Circle&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;_radius&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;radius&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;_radius&lt;/span&gt;&lt;span class="p"&gt;;}&lt;/span&gt;
        &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;_radius&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Mathf&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;circumference&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Mathf&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Pi&lt;/span&gt; &lt;span class="p"&gt;*&lt;/span&gt; &lt;span class="n"&gt;radius&lt;/span&gt; &lt;span class="p"&gt;*&lt;/span&gt; &lt;span class="n"&gt;radius&lt;/span&gt;&lt;span class="p"&gt;;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;There is no such thing as a "circumference" variable, instead its value is
computed on the fly, yet you can still use it as if it were an actual variable:&lt;/p&gt;
&lt;pre class="code csharp literal-block"&gt;
&lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;volume&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt; &lt;span class="p"&gt;*&lt;/span&gt; &lt;span class="n"&gt;myCircle&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;circumference&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Unity handes rotation using quaternions but you can still use Euler angles in
the editor and in scripting, this is (most likely) the result of using
properties as well. Properties are also great for exposing member variables in
custom inspectors, like I did or Grid Framework. Unfortunately there is a
problem.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="member-varibles-and-the-editor"&gt;
&lt;h2&gt;Member varibles and the editor&lt;/h2&gt;
&lt;p&gt;You can treat the property just like any other variable when writing a custom
inspector. However, once you hit play you will notice that your values have
been reset and once you exit play mode or change the scene or anything else
your values reset again. This is because the properties cannot actually store
anything, they just serve to expose private members. The values of private
members don't stick though, that's why everything gets reset. The solution is
to use [SerializeField]:&lt;/p&gt;
&lt;pre class="code csharp literal-block"&gt;
&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Circle&lt;/span&gt;&lt;span class="p"&gt;{,&lt;/span&gt;
&lt;span class="na"&gt;    [SerializeField]&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;_radius&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;radius&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;_radius&lt;/span&gt;&lt;span class="p"&gt;;}&lt;/span&gt;
    &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;_radius&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Mathf&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;circumference&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Mathf&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Pi&lt;/span&gt; &lt;span class="p"&gt;*&lt;/span&gt; &lt;span class="n"&gt;radius&lt;/span&gt; &lt;span class="p"&gt;*&lt;/span&gt; &lt;span class="n"&gt;radius&lt;/span&gt;&lt;span class="p"&gt;;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;That's it, now your member variable will get serialized and will be remembered.
It took me a while to find this, but I was finally able to throw out quite a
lot of ugly workarounds. And now there is no reason not to use properties
anymore. Let's end this post by using properties to limit the value of a float
variable to something appropriate for angles:&lt;/p&gt;
&lt;pre class="code csharp literal-block"&gt;
&lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;_angle&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;angle&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;_angle&lt;/span&gt;&lt;span class="p"&gt;;}&lt;/span&gt;
    &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;value&lt;/span&gt; &lt;span class="p"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="k"&gt;value&lt;/span&gt; &lt;span class="p"&gt;%&lt;/span&gt; &lt;span class="m"&gt;360&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;360&lt;/span&gt; &lt;span class="p"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;value&lt;/span&gt; &lt;span class="p"&gt;%&lt;/span&gt; &lt;span class="m"&gt;360&lt;/span&gt;&lt;span class="p"&gt;);}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">HiPhish</dc:creator><pubDate>Thu, 14 Feb 2013 00:00:00 +0100</pubDate><guid isPermaLink="false">tag:hiphish.github.io,2013-02-14:grid-framework/news/2013/02/14/properties-accessors/</guid><category>old-blog</category><category>how-to</category></item><item><title>Happy new year</title><link>http://hiphish.github.io/grid-framework/news/2013/01/01/new-year/</link><description>&lt;p&gt;A happy new year to everyone! This has been quite a year for me, so what better
opportunity to recap the birth process and evolution of Grid and set the plans
for this year?&lt;/p&gt;
&lt;div class="section" id="how-it-all-began"&gt;
&lt;h2&gt;How it all began&lt;/h2&gt;
&lt;p&gt;One day I was sitting at my computer, trying to place blocks in Unity, thinking
how great it would be if there was some sort of extension, a framework if you
will, that would auto snap objects to a grid of my choice. Unity already has
some form of grid built in, but it's rather poor to say the least.
Unfortunately a quick Google search didn't yield anything useful, so was left
waiting for someone who knew how to program a copmputer to make such an
extension. Then it struck me: I am someone and I know how to program a
computer!&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-first-draft"&gt;
&lt;h2&gt;The first draft&lt;/h2&gt;
&lt;p&gt;So I sat down, took out some pen and paper and started deriving th formulae.
After a while I had a plan and I wrote a nice simple makeshift solution. It
worked but in my head all sorts of great ideas popped up. What if the grid was
in 3D and could be rotated? Would it be possible not to just align objects but
construct an entire coordinate system out of it? What if the origin of the grid
was not the origin of the world but any point in space? Would it be possible to
have more than one grid in the scene? How about entirely different grid shapes
than just squares? And if all that was possible, wouldn't be possible to use
the grid for more than just aliging? Could the grid be used for actual
gameplay?&lt;/p&gt;
&lt;p&gt;The idea at the time was to get the makeshift solution polished up a bit and
then give it away for free and ask for a small donation or sell if really
cheaply. This idea was humble, if you want to be nice, or stupid, if you want
to be realistic. Essentially, it wouldn't have made any user happy nor would it
have made me money. No one would win. Fortunately the Asset Store submission
got lost somehow and remembering the awful drawings I had for the Asset Store
pictures, it really was for the best.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="this-time-for-real"&gt;
&lt;h2&gt;This Time For Real&lt;/h2&gt;
&lt;p&gt;The lesson I leared was that if you want to do something do it either right or
don't do it at all. People will remember a halfassed effort and you will never
be able to shake it off. Instead I decided to get serious this time, I switched
my language from JavaScript to C#, dug into the deepest depths of the Unity
documentation and learned many new things along the way. At times it was
infuriating, at times it was fantastic and at times it was plain boring.
Nonetheless, if I had the chance to travel back in time I wouldn't do anything
differently (except for some lessons I had to learn the hard way), the
experience alone of crafting something on your own and working towards a goal
is very rewarding. I don't think there was anything left from the first draft,
and even if it was it is all gone by now. Good riddance.&lt;/p&gt;
&lt;p&gt;If it had been just the coding part it would have been enough already. Being a
one man team however, I also had to write the documentation, design a logo,
create the Asset Store promotional material and write descriptions for the
Store and the forum thread. I never learned anything about marketing, but I did
work in retail, this is where my exerience came in handy. On the internet I can
think all day about the description text, but when it comes to talking face to
face with real people your brain has to act very quickly.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-first-release"&gt;
&lt;h2&gt;The First Release&lt;/h2&gt;
&lt;p&gt;If you were to ask me what the hardest part was, I would say finishing it.
There comes a point when you have to draw the line and stop adding new features
so you can iron out the remaining bugs and wrap up the lose ends. There were
still some left after the release though, mainly the integration into Unity's
interface, no cusom inspectors for the grid classes and the complete lack of
rendering. I decided to tackle those as quickly as possible, for I was running
out of time.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-1-1-x-line"&gt;
&lt;h2&gt;The 1.1.x Line&lt;/h2&gt;
&lt;p&gt;I had no idea how to do the rendering and at one point I was considering
imitating Vectrosity's behaviour (after asking for permission of course).
Anyone who owns Vectrosity and who has taken a look at the code will be blown
away by all the work of the author, there was no way I could just rip out some
parts and call it a day. Instead I decided to write my own rendering solution
and offer Vectrosity support as an option, since I already had a license and
the two looked like a perfect fit. Both solutions work in fundamentally
different ways, so users can choose the one they like best. Yay for choice ^^&lt;/p&gt;
&lt;p&gt;After getting rendering, the biggest missing feature, and Vectrosity support
out I had two things to do: many small improvements like a custom rendering
range or additional functions and of course hex grids. This was during the
summer when I was busy studying for exams, so my work on Grid Framework slowed
down to a crawl after the first few 1.1.x releases.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="version-1-2-x-and-hex-grids"&gt;
&lt;h2&gt;Version 1.2.x and hex grids&lt;/h2&gt;
&lt;p&gt;After the exams I was finally able to devote time to Grid Framework again. The
hardest part about hex grids was not so much the math, although that wasn't
easy either, but how many possibilities there are to do hex grids. I already
discussed this topic a few months ago, but this was a real pain. It was clear I
wouldn't write several classes, so I had to design my code to accommodate for
all the cases. In the end the solution was not really hard, it was the journey
there, I just couldn't find anything on the internet or in any book about how
to do it. What really matters in the end though, is that I was able to deliver
one class for all cases, fitting right with my design principles established in
the first release.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-future-of-grid-framework"&gt;
&lt;h2&gt;The Future of Grid Framework&lt;/h2&gt;
&lt;p&gt;Well, that's it for last year, but what can you expect for 2013? First of all,
I'm working on my own website, so far it has only been this blog and the forum
thread, but I would like to give Grid Framework a proper web presence. I had to
learn HTML and CSS from scratch, but the site is almost done, just a few
finishing touches and it should be up soon.&lt;/p&gt;
&lt;p&gt;Hex grids have the same feature set as rectangular grids, but there is more we
can do with them, most notably more coordinate systems. Expect more updates for
hex grids after the site has launched. There are also a few minor features I
would like to get done all across Grid Framework, so I'll add them inbetween
the more important releases.&lt;/p&gt;
&lt;p&gt;Triangular grids and path finding are next on the priority list, I just haven't
decided which one would be more important. Triangular grids sound easier, but
path finding seems more useful. I'll have to think this over when the time
comes.&lt;/p&gt;
&lt;p&gt;Well, that's it for this time. Have a good year 2013 and thank you all for your
support :)&lt;/p&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">HiPhish</dc:creator><pubDate>Tue, 01 Jan 2013 00:00:00 +0100</pubDate><guid isPermaLink="false">tag:hiphish.github.io,2013-01-01:grid-framework/news/2013/01/01/new-year/</guid><category>old-blog</category><category>rant</category></item><item><title>Hex Grid introduction video</title><link>http://hiphish.github.io/grid-framework/news/2012/12/17/hex-intro/</link><description>&lt;p&gt;I made a short video giving you an overview of hex grids, so you can see them
right in action. I'll make a video on how to extend Grid Framework with your
own methods yourself next,&lt;/p&gt;
&lt;div class="youtube youtube-16x9"&gt;&lt;iframe allowfullscreen="" frameborder="0" seamless="" src="https://www.youtube.com/embed/1mb95Nhv8I0"&gt;&lt;/iframe&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">HiPhish</dc:creator><pubDate>Mon, 17 Dec 2012 00:00:00 +0100</pubDate><guid isPermaLink="false">tag:hiphish.github.io,2012-12-17:grid-framework/news/2012/12/17/hex-intro/</guid><category>old-blog</category><category>how-to</category></item><item><title>How to loop through a list and remove items</title><link>http://hiphish.github.io/grid-framework/news/2012/11/16/how-to-loop/</link><description>&lt;p&gt;The other day I had the following problem: I had a list of Transfoms and I
wanted to remove the entries that met a certain condition. This is what I had
written:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
foreach(Transform trns in transformList){
    if(AlreadyAligned(trns))
        transformList.Remove(trns);
}
&lt;/pre&gt;
&lt;p&gt;This gave me the following error message: InvalidOperationException: Collection
was modified; enumeration operation may not execute.&lt;/p&gt;
&lt;p&gt;This makes sense, I'm modifying the list I'm currently reading and there is no
way I can be sure I'll catch all entries. There are three ways around this
problem: The first is to use LINQ (C# only), the second is instead of removing
the entries at once to store them in a separate list and then use that list in
a second foreach-loop to remove the entries from the first list and the third
solution is to use a for-loop. After some reseach I reached the conclusion that
the for-loop is the fasted way to achieve the needed results. Here is the code:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
int counter = transformList.Count;
for(int i = 0; i &amp;lt;= counter - 1; i++){
    if(AlreadyAligned(transformList[i])){
        transformList.RemoveAt(i);
        i --; //reduce the indexer because we removed an entry from list
        counter --; //reduce the counter since the list has become smaller
    }
}
&lt;/pre&gt;
&lt;p&gt;First of all we need to know how many entries the list has initially. I could
have used transformList.Count in the loop directly but this way I don't have to
call the Count method for each iteration. Then we set up the loop, we start at
index 0 and go to counter - 1 (because the index starts at 0 instead of 1). We
perform our check and if it succeeds we remove the entry with index i. Since
the list has now been shortened we need to reduce i because an item that has
been at a position of 7 for example is now at position 6 (assuming that i is
less or equal to 6 in this case). We also need to reduce our counter because
the length of the list has been shortened as well.&lt;/p&gt;
&lt;p&gt;As you can see the amount of lines has been doubled, while using LINQ would
have left the code short. If you know that your list will always be small
enough I'd go for the slower but shorter approach. In my case though I have no
idea how large the list will eventually be, so using the for-loop makes perfect
sense. I hope some of you find this useful in the future.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">HiPhish</dc:creator><pubDate>Fri, 16 Nov 2012 00:00:00 +0100</pubDate><guid isPermaLink="false">tag:hiphish.github.io,2012-11-16:grid-framework/news/2012/11/16/how-to-loop/</guid><category>old-blog</category><category>how-to</category></item><item><title>Back again</title><link>http://hiphish.github.io/grid-framework/news/2012/10/28/back-again/</link><description>&lt;p&gt;I just wanted to drop a line saying I'm back to work. As I mentioned previously
I was busy with exams, so development ws slowed down and during the last couple
of weeks I had to stop completely to concentrate on studies. Now that it's over
I can get back to working on the hex grid update. Currently I'm about halfway
done, maybe more. I'll keep you updated :) Finally, I'd like to thank everyone
who bought Grid Framework so far, you guys have made all this effort worthwhile
and you are the ones who allow me to go on with it. Thank you.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">HiPhish</dc:creator><pubDate>Sun, 28 Oct 2012 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:hiphish.github.io,2012-10-28:grid-framework/news/2012/10/28/back-again/</guid><category>old-blog</category></item><item><title>Example video: Level Design and Text parsing in Unity3D</title><link>http://hiphish.github.io/grid-framework/news/2012/10/06/example-parsing/</link><description>&lt;p&gt;I made another example video for Grid Framework, this time for the recently
introduced text parsing example. Now building new levels is as easy as writing
a few lines of plain text and you get perfect clockwork-like precision. This
opens up new possibilities for faster development, easier maintenance, easier
level editors and support for user-made content. Just take a look at how simle,
yet effective it is:&lt;/p&gt;
&lt;div class="youtube youtube-16x9"&gt;&lt;iframe allowfullscreen="" frameborder="0" seamless="" src="https://www.youtube.com/embed/lvYWbJ8ohkA"&gt;&lt;/iframe&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">HiPhish</dc:creator><pubDate>Sat, 06 Oct 2012 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:hiphish.github.io,2012-10-06:grid-framework/news/2012/10/06/example-parsing/</guid><category>old-blog</category><category>example</category></item><item><title>Cannot log into my account</title><link>http://hiphish.github.io/grid-framework/news/2012/10/02/cannot-log-in/</link><description>&lt;p&gt;I've written two new examples, one that takes a plain text file and parses it
to create a breakout-style level based on a grid without changing the scene,
the other is a continuation of my grid-based movement exmple where I can place
obstacles on the grid and the sphere will not step on those squares (without
using any physics like collision and raycasts). Sadly I can't update Grid
Framework because I can't log into my account via Package Manager. My account
still works, I can log into the forums and my Publisher Administration, so the
problem must lie within the editor. I've submitted a bug report, but until then
I cannot publish updates. If you are interested in one of those two examples
please contact me over the Unity forums and I'll send you the examples,
provided that you already own Grid Framework. On a related note, it appears
that Grid Framework's product page in the Asset Store doesn't have any
screenshots. I did submit screenshots, but they don't appear for me, I don't
know if other people can't see them either.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">HiPhish</dc:creator><pubDate>Tue, 02 Oct 2012 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:hiphish.github.io,2012-10-02:grid-framework/news/2012/10/02/cannot-log-in/</guid><category>old-blog</category></item><item><title>Swap variables in Unity</title><link>http://hiphish.github.io/grid-framework/news/2012/08/25/swap-variables-in-unity/</link><description>&lt;p&gt;I've decided to go with one HexGrid class and provide enough options. To do
this I will need to swap around variables so I can use the same formulae for
different cases. I could write the swapping part where it is needed, but then
I'd be writing the same thing several times (which is a bad thing to do).
Wouldn't it be better if there was some sort of swapping function? Could that
function work for any type of variable? Could it work without needing to
reassign variables again? Yes to all of that:&lt;/p&gt;
&lt;pre class="code csharp literal-block"&gt;
&lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="n"&gt;Swap&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;(&lt;/span&gt;&lt;span class="k"&gt;ref&lt;/span&gt; &lt;span class="n"&gt;T&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;ref&lt;/span&gt; &lt;span class="n"&gt;T&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="n"&gt;T&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;It works the usual way, you create a temporary variable, assign one variable to
it, then assign the second to the first and the temporary to the second. The T
stands for the type, this is a generic function, meaning you can use it for any
type you want. You can swap int, float or even something crazy like Collider or
something usermade. The ref means that the changes done to the variables in the
function are reflected right back. Usually a function "copies" the values
passed and leaves the original variables untouched. To use the code you would
write something like&lt;/p&gt;
&lt;pre class="code csharp literal-block"&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;Swap&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;(&lt;/span&gt;&lt;span class="k"&gt;ref&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;ref&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;There are some tricks floating around on the internet without the use of a
temporary variable and using math tricks instead, don't use those. At best your
code just gets ugly, at worst you even get worse performance. Also, you are
limiting yourself to numbers only, whereas this Swap function works for
anything. Hooray for generics!&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">HiPhish</dc:creator><pubDate>Sat, 25 Aug 2012 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:hiphish.github.io,2012-08-25:grid-framework/news/2012/08/25/swap-variables-in-unity/</guid><category>old-blog</category><category>how-to</category></item><item><title>Vectrosity progress</title><link>http://hiphish.github.io/grid-framework/news/2012/08/12/vectrosity-progress/</link><description>&lt;p&gt;Well, it's pretty much done, you can now get a set of Vector3 points for use
with Vectrosity from just one line of code. I played a bit with Vectrosity to
make an example scene and this is what it looks like:&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;img alt="Screenshot of laser-line grids" class="img-responsive" src="http://hiphish.github.io/grid-framework/news/2012/08/12/vectrosity-progress/images/vectorsity-progress.png"/&gt;
&lt;p class="caption"&gt;(yes, I am a sucker for laser lines)&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;The green grid just hangs there and rotates, the red grid bounces around (using
Unity's physics engine), the yellow grid resizes itself all the time and the
colourful grid changes the colours of its lines randomly. The "missing" lines
in the last grid lines are not a bug, they are sill there but coloured black.&lt;/p&gt;
&lt;p&gt;I expect version 1.1.2 to be the last feature update before adding Hex Grids,
so I want to wrap up all the loose ends I might still have left. In particular
I want to integrate the components into Unity's main interface, no more
dragging scripts onto GameObjects.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">HiPhish</dc:creator><pubDate>Sun, 12 Aug 2012 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:hiphish.github.io,2012-08-12:grid-framework/news/2012/08/12/vectrosity-progress/</guid><category>old-blog</category><category>example</category><category>extension</category></item><item><title>Line width for rendering</title><link>http://hiphish.github.io/grid-framework/news/2012/08/09/line-width-for-rendering/</link><description>&lt;p&gt;I just submitted version 1.1.1 (&lt;em&gt;update: has been approved&lt;/em&gt;) which lets you set
the width of the rendered line in the inspector. Here is an example, obviously
it's over the top, but you can set the width to anything you like.&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;img alt="some image" class="img-responsive" src="http://hiphish.github.io/grid-framework/news/2012/08/09/line-width-for-rendering/images/line-width.png"/&gt;
&lt;/div&gt;
&lt;p&gt;Now I just need to provide a nice function to pass rendering points to
Vectrosity. I'm sure those of you who own a Vectrosity license would like to be
able to combine the best of both. I promise when I'm done it will be the last
time you'll see me talk about rendering for a while.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">HiPhish</dc:creator><pubDate>Thu, 09 Aug 2012 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:hiphish.github.io,2012-08-09:grid-framework/news/2012/08/09/line-width-for-rendering/</guid><category>old-blog</category></item><item><title>Grid-based game logic</title><link>http://hiphish.github.io/grid-framework/news/2012/08/03/grid-based-game-logic/</link><description>&lt;p&gt;Another video tutorial, howing how to use grid-based game logic in a puzzle
game. This is the tutorial for the lights-out game I mentioned before and which
has been included with the package.&lt;/p&gt;
&lt;div class="youtube youtube-16x9"&gt;&lt;iframe allowfullscreen="" frameborder="0" seamless="" src="https://www.youtube.com/embed/sXlagrglfQ8"&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;p&gt;This tutorial is written in C# because it uses delegates and events. The reason
why is so that no single tile needs to know about the other tiles, making this
code extremely flexible, you culd even change your scene during runtime. If you
don't know about delegates and events I really recommend you to check out
prime31studios' video. Their video series really got me into C# development.&lt;/p&gt;
&lt;div class="youtube youtube-16x9"&gt;&lt;iframe allowfullscreen="" frameborder="0" seamless="" src="https://www.youtube.com/embed/N2zdwKIsXJs"&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;p&gt;To give you the basic idea, events and delegates mean that somewhere somehow
something happens and some other objects react to that. The object that
triggered the event itself has no idea who (if anyone) is listening and how
they will resond. For example you could have an RPG where when you draw your
sword it makes villagers run away and guards draw their own weapons. Your hero
would not need to know how many villagers and guards (if any) are around, he
just needs to fire the event and all listeners will react accordingly.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">HiPhish</dc:creator><pubDate>Fri, 03 Aug 2012 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:hiphish.github.io,2012-08-03:grid-framework/news/2012/08/03/grid-based-game-logic/</guid><category>old-blog</category><category>example</category></item><item><title>Grid movement and runtime snapping</title><link>http://hiphish.github.io/grid-framework/news/2012/07/29/grid-movement-and-runtime-snapping/</link><description>&lt;p&gt;Well, I just sent my second submission. There are three examples included, one
showcasing grid-based movement, one showcasing how to place objects on a grid
during gameplay and the lights-out game mentioned below. i also made tutorial
videos for the first two, showcasing how you can accomplish these tasks in a
simple manner on your own:&lt;/p&gt;
&lt;div class="youtube youtube-16x9"&gt;&lt;iframe allowfullscreen="" frameborder="0" seamless="" src="https://www.youtube.com/embed/m9_efVi_tFs"&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;div class="youtube youtube-16x9"&gt;&lt;iframe allowfullscreen="" frameborder="0" seamless="" src="https://www.youtube.com/embed/QqUzcthkvcc"&gt;&lt;/iframe&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">HiPhish</dc:creator><pubDate>Sun, 29 Jul 2012 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:hiphish.github.io,2012-07-29:grid-framework/news/2012/07/29/grid-movement-and-runtime-snapping/</guid><category>old-blog</category><category>example</category></item><item><title>A quick update</title><link>http://hiphish.github.io/grid-framework/news/2012/07/27/a-quick-update/</link><description>&lt;p&gt;I have been contacted by an Asset Store admin, who recommends me to include a
demo scene so users could see an end setup. I thought dragging a script onto an
object is pretty straight-forward, but I agree, a demo scene would be a really
good idea. The tricky party is coming up with good ideas; don't get me wrong, I
have plenty of ideas for actual gameplay examples, but for a demo scene I need
something more basic and at the same time more catchy. I already made a little
sphere that randomly roams a grid face by face, stays within limits and
immediately adapts to changes in the grid, all with just 32 lines of code total
(not counting whitespaces and comments). I'll come up with two or three more
nice demos, that should give a good impression of Grid Framework  in action.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">HiPhish</dc:creator><pubDate>Fri, 27 Jul 2012 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:hiphish.github.io,2012-07-27:grid-framework/news/2012/07/27/a-quick-update/</guid><category>old-blog</category></item><item><title>Almost there...</title><link>http://hiphish.github.io/grid-framework/news/2012/07/22/almost-there/</link><description>&lt;p&gt;Well, it's alsmost done. Again. Turns out that making an asset is only half the
job, you still need to hammer out any ugly dents, polish the thing and then
change your job to become a graphic designer, a video commentator, a writer and
a salesman! What good is the best asset if you present it in such a way that
makes people not even want to take a look? I'm not claiming that I'm an expert
in any of those fields, but I believe I did a pretty good job (well, maybe my
voice work for the video could use some improvements). In a way I'm glad the
old "images" I had prepared for the first version are now lost forever, that
was something to turn people away forever. You cannot imagine how awful those
looked.&lt;/p&gt;
&lt;p&gt;Anyway, I finished the videos, I made the drawings for the asset store and I
wrote the documentation. The only things left now are uploading the videos
(which will take quite a while with my connection), writing a description text
for the asset store (shouldn't be too much, so it won't take too long) and then
sending the files over to Unity. In the meantime, please enjoy a small teaser:&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;img alt="an image" class="img-responsive" src="http://hiphish.github.io/grid-framework/news/2012/07/22/almost-there/images/Grid_image_big.png"/&gt;
&lt;p class="caption"&gt;Unfortunately clicking this won't do anything. Yet.&lt;/p&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">HiPhish</dc:creator><pubDate>Sun, 22 Jul 2012 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:hiphish.github.io,2012-07-22:grid-framework/news/2012/07/22/almost-there/</guid><category>old-blog</category></item><item><title>Turn off the lights!</title><link>http://hiphish.github.io/grid-framework/news/2012/05/29/turn-off-the-lights/</link><description>&lt;p&gt;Here is a nice little puzzle game made using the grid framework. When you click
a square that square and the four adjacent squares flip their color. Your task
is to turn them all off.&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;img alt="Screenshot from lights out game example" class="img-responsive" src="http://hiphish.github.io/grid-framework/news/2012/05/29/turn-off-the-lights/images/lights-out.png"/&gt;
&lt;/div&gt;
&lt;p&gt;The entire game uses only two scripts with a total of 70 lines of code. Sure,
that may not seem like a small amount, but keep in mind that almost half of
that is just whitespace and comments for better readability. The other half is
mostly just to handle the user's input and only two lines are used for
grid-based operations, i. e. finding out which tiles to flip. What's even
better is that this works for any setup, you can even have holes and weird
apendages like in the above picture. You could even move tiles during gameplay
or generate the puzzle dynamically rather than by hand every time. Grid
framework always finds the right tiles for you.&lt;/p&gt;
&lt;p&gt;I will put up a video tutorial eventually once the package is released. I used
delegates and events, so if you don't know what they are take a look at
prime31studios' video tutorial:&lt;/p&gt;
&lt;div class="youtube youtube-16x9"&gt;&lt;iframe allowfullscreen="" frameborder="0" seamless="" src="https://www.youtube.com/embed/N2zdwKIsXJs"&gt;&lt;/iframe&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">HiPhish</dc:creator><pubDate>Tue, 29 May 2012 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:hiphish.github.io,2012-05-29:grid-framework/news/2012/05/29/turn-off-the-lights/</guid><category>old-blog</category><category>example</category></item><item><title>Introduction video</title><link>http://hiphish.github.io/grid-framework/news/2012/04/11/introduction-video/</link><description>&lt;p&gt;As promised, here it is:&lt;/p&gt;
&lt;p&gt;[video deleted]&lt;/p&gt;
&lt;p&gt;A basic overview of what the first release has to offer. Stay tuned for future updates. The package is waiting for approval now.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">HiPhish</dc:creator><pubDate>Wed, 11 Apr 2012 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:hiphish.github.io,2012-04-11:grid-framework/news/2012/04/11/introduction-video/</guid><category>old-blog</category></item><item><title>Introduction</title><link>http://hiphish.github.io/grid-framework/news/2012/04/09/introduction/</link><description>&lt;p&gt;Hello everyone :)&lt;/p&gt;
&lt;p&gt;I have been working on making a 2D platformer in Unity in the spirit of the old
8 Bit and 16 Bit games such as Super Mario and Sonic. One thing I really admire
about those games is their sense of clockwork-like precision, you never feel
cheated by the controls, you always know which jumps you can make and which
ones you can't.&lt;/p&gt;
&lt;p&gt;Part of this precision comes from how these games can easily be broken up into
blocks. For example Mario is either 1x1 blocks or 1x2 blocks large (actually
it's slightly less, but let's not get lost in details here), he can jump a
certain height and certain distance at a certain given speed and the level
designers can easily calculate how many blocks they need to use to make the
game just challenging enough to be fun but not unfair.&lt;/p&gt;
&lt;p&gt;Consequently, I would have to do the same thing. I would need to come up with a
certain block size (let's say 1x1 in Unity units) and adjust the scale and
position of everything accordingly by hand. Not fun at all. Wouldn't it be
awesome if Unity had some sort of grid framework, some way of specifying the
grid's spacing and origin and just have the computer do the rest? Couldn't the
computer scale and position my blocks inside the grid instead of me?&lt;/p&gt;
&lt;p&gt;Well, if you need it, then make it, that's what I told myself. After coming up
with an approach and a long-term plan of what to do I made the first step, a 2D
grid class that can be used for scaling and alignment. The script will match
you objects as closely to the grid as possible, so if your block is slightly
larger it will shrink and if it's slightly smaller it will grow. With just a
single key combo you can turn this messy Breakout field&lt;/p&gt;
&lt;p&gt;into this clean arrangement&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;img alt="some image" class="img-responsive" src="http://hiphish.github.io/grid-framework/news/2012/04/09/introduction/images/Breakout.png"/&gt;
&lt;/div&gt;
&lt;p&gt;Actually, it took me longer to put those blocks into the scene than to align
and scale them. As you can see some blocks didn't even have the right
proportions.&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;img alt="some image" class="img-responsive" src="http://hiphish.github.io/grid-framework/news/2012/04/09/introduction/images/Breakout2.png"/&gt;
&lt;/div&gt;
&lt;p&gt;Of course aligning and scaling is not all this is good for. As I mentioned
before, the 2D grid is a class and as such can be used for scripting as well.
The functions for scaling and aligning are built into the class so you can
perform these actions during runtime. You could use the grid for path finding
or anything you want. Every grid contains a matrix of its vertices, allowing
you to instantly read any point within a specified range just by providing the
coordinates, no math needed. Every grid is infinite in size since it's only
defined by origin and spacing (the vertex matrix obviously isn't infinite) so
there are no limitis to how far you can go with this grid.&lt;/p&gt;
&lt;p&gt;I'm currently doing some polishing and fixing minor bugs. A promotional YouTube
video will be coming soon, I finished writing the script, now I need to record
it. Once I'm done the assets (including the documentation with scripting
reference) will be avaible in the Unity Asset Store for an affordable price.
The future plans are to properly support 3D grids with rotation, make the
interface more convenient, have mouse snapping in the editor, hex grids and
whatever else I can come up with.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">HiPhish</dc:creator><pubDate>Mon, 09 Apr 2012 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:hiphish.github.io,2012-04-09:grid-framework/news/2012/04/09/introduction/</guid><category>old-blog</category></item><item><title>Something's coming...</title><link>http://hiphish.github.io/grid-framework/news/2012/03/27/somethings-coming/</link><description>&lt;p&gt;OK, let's test this new blog thing...&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;img alt="very early image of Grid Framework" class="img-responsive" src="http://hiphish.github.io/grid-framework/news/2012/03/27/somethings-coming/images/infinite-grid.png"/&gt;
&lt;p class="caption"&gt;behold the beauty of infinity...&lt;/p&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">HiPhish</dc:creator><pubDate>Tue, 27 Mar 2012 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:hiphish.github.io,2012-03-27:grid-framework/news/2012/03/27/somethings-coming/</guid><category>old-blog</category></item></channel></rss>