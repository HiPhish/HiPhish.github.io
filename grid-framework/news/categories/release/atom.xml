<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>HiPhish's Workshop</title><link href="http://hiphish.github.io/" rel="alternate"></link><link href="http://192.168.0.190:8000/grid-framework/news/categories/release/atom.xml" rel="self"></link><id>http://hiphish.github.io/</id><updated>2016-06-30T00:00:00+02:00</updated><entry><title>Grid Framework version 2.1.0 released</title><link href="http://hiphish.github.io/grid-framework/news/2016/06/30/release-210/" rel="alternate"></link><published>2016-06-30T00:00:00+02:00</published><updated>2016-06-30T00:00:00+02:00</updated><author><name>HiPhish</name></author><id>tag:hiphish.github.io,2016-06-30:grid-framework/news/2016/06/30/release-210/</id><summary type="html">&lt;p&gt;Grid Framework version 2.1.0 has been approved by the Asset Store. This release
brings  new  features  in making  some  previously  read-only  properties  also
writeable, fixes compiler issues in connection with Playmaker actions and makes
the code comply with the Visual Studio compiler.&lt;/p&gt;
&lt;p&gt;The  newly writeable  properties are computed  properties  which depend  on one
stored property. When writing to the property the inverse of reading formula is
applied. These properties are:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;In hexagonal grids &lt;code&gt;Width&lt;/code&gt;, &lt;code&gt;Height&lt;/code&gt;, &lt;code&gt;Side&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;In polar grids: &lt;code&gt;Radians&lt;/code&gt;, &lt;code&gt;Degrees&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;In spherical grids: &lt;code&gt;Polar&lt;/code&gt;, &lt;code&gt;PolarDeg&lt;/code&gt;, &lt;code&gt;Azimuth&lt;/code&gt;, &lt;code&gt;AzimuthDeg&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The properties of the hexagonal grid are particularly useful,  because half the
&lt;code&gt;Height&lt;/code&gt; is the radius of the inscribed circle. Previously if you wanted to set
the size  of a  hexagon based  on the  inner radius  in the  editor you  had to
compute the outer one by hand, but now you can just set the &lt;code&gt;Height&lt;/code&gt; directly.&lt;/p&gt;
</summary></entry><entry><title>Grid Framework version 2.0.1 released</title><link href="http://hiphish.github.io/grid-framework/news/2016/06/05/release-201/" rel="alternate"></link><published>2016-06-05T00:00:00+02:00</published><updated>2016-06-05T00:00:00+02:00</updated><author><name>HiPhish</name></author><id>tag:hiphish.github.io,2016-06-05:grid-framework/news/2016/06/05/release-201/</id><summary type="html">&lt;p&gt;Version 2.0.1 fixes a bug where the custom inspector of the &lt;em&gt;Cylinder&lt;/em&gt; renderer
for polar  grids  would  not show  up.  It would  instead  display  the default
inspector generated by Unity,  which was  still functional,  but ugly and would
expose things meant for scripting only.&lt;/p&gt;
</summary></entry><entry><title>Grid Framework version 2.0.0 released</title><link href="http://hiphish.github.io/grid-framework/news/2016/05/25/release-200/" rel="alternate"></link><published>2016-05-25T00:00:00+02:00</published><updated>2016-05-25T00:00:00+02:00</updated><author><name>HiPhish</name></author><id>tag:hiphish.github.io,2016-05-25:grid-framework/news/2016/05/25/release-200/</id><summary type="html">&lt;p&gt;After almost half  a year in  the making  Grid Framework  version 2.0  has been
released on the Unity &lt;a class="reference external" href="https://www.assetstore.unity3d.com/en/#!/content/62498"&gt;Asset Store&lt;/a&gt;. This is the first major release since the
initial launch  and will make Grid Framework  easier to use,  more powerful and
more flexible with no extra performance overhead.  Being a major version update
this breaks compatibility  with the version 1.x releases,  but an upgrade guide
is included in  the user manual.  If you  still cannot  upgrade to  2.0 you can
still keep using 1.x, but the old releases will not be getting any new features
anymore.&lt;/p&gt;
&lt;p&gt;Version 1.x  has been  deprecated on  the Asset Store,  which means  you can no
longer purchase it,  but you  can still  access it if  you purchased it  in the
past. All existing customers  can get a free upgrade to version 2.0,  it really
is that much better.&lt;/p&gt;
&lt;div class="section" id="what-is-new"&gt;
&lt;h2&gt;What is new&lt;/h2&gt;
&lt;p&gt;The changes are too many to list as a simple changelog,  almost all of the code
has been refactored. I will give you the highlights instead.&lt;/p&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;Separate grids and rederers&lt;/dt&gt;
&lt;dd&gt;&lt;p class="first"&gt;In the past a grid has had many jobs:  be a grid, convert coordinates,  show
the  grid  and possibly  even  more. This lead  to very  few but  very large
classes with a  large public API.  It was hard  for users to  find what they
were looking for and hard from me to maintain.&lt;/p&gt;
&lt;p class="last"&gt;The  tasks  have  now  been  split  up:  Grids are  just grids  and  convert
coordinates while designated renderer  classes are responsible for computing
how to display the grids. There can be more than one renderer type for every
grid, such as the different shapes of hex grids. This leads to more classes,
but every class is much smaller than the one big class it originates from.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;A leaner and cleaner API&lt;/dt&gt;
&lt;dd&gt;&lt;p class="first"&gt;Some features had  been added to  Grid Framework because  they seemed handy,
but while  re-evaluating  the framework  I found  that a  lot  of  them were
redundant of leftovers from previous  releases that had been kept in for the
sake of compatibility. Take for examples &lt;code&gt;size&lt;/code&gt; and &lt;code&gt;renderFrom&lt;/code&gt;/&lt;code&gt;renderTo&lt;/code&gt;,
the  &lt;code&gt;size&lt;/code&gt;  is  really  just a  special case  of setting  &lt;code&gt;renderFrom&lt;/code&gt; and
&lt;code&gt;renderTo&lt;/code&gt; to the same value with opposite sign.&lt;/p&gt;
&lt;p class="last"&gt;This is just confusing and adds no real value for the user. If something can
be  fully  replicated with  one or  two  lines  of code  and no  overhead it
shouldn't be part of the framework. A major release is a good opportunity to
throw out the old stuff.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;Official extension methods&lt;/dt&gt;
&lt;dd&gt;&lt;p class="first"&gt;Throwing redundant  API out  is easy,  but what  about API that  is actually
useful but does  not really fit  the nature of  the class?  Take for example
&lt;code&gt;AlignTransform&lt;/code&gt;:  aligning objects is very useful and not too trivial,  but
it does  not really  belong in  the grid  class.  The C#  language  offers a
feature for this: extension methods.&lt;/p&gt;
&lt;p class="last"&gt;Extension methods need to be explicitly imported,  but they are used just as
if they were methods of  the class they extend.  Grid Framework comes with a
number of useful standard extension methods grouped by task. You will now be
able to find what you are looking for much faster.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;A flexible rendering pipeline&lt;/dt&gt;
&lt;dd&gt;&lt;p class="first"&gt;In version 1.x the  rendering process has been  mostly "magic" where you set
the values of the  grid and then lines appear.  In version 2.0 the rendering
now passes through a number of stages  and you can intercept any of them and
take full control over the process from there.&lt;/p&gt;
&lt;p class="last"&gt;Of course if  you don't need  that you can  leave things as  they are and it
will just work as it did before.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;Events fired by grids&lt;/dt&gt;
&lt;dd&gt;&lt;p class="first"&gt;We are now making use  of the C# ability to use  messages on certain events,
i.e. when the  properties of a grid change.  This allows you to only do work
when something has happened instead of having to poll the grid constantly.&lt;/p&gt;
&lt;p class="last"&gt;This feature is used by renderers to only update the lines when the grid has
actually changed.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;Namespaces over prefixes&lt;/dt&gt;
&lt;dd&gt;Older  versions  of Unity  had  trouble with  &lt;code&gt;MonoBehaviour&lt;/code&gt;  subclasses in
custom namespaces, forcing me to prefix every class with &lt;code&gt;GF&lt;/code&gt;. Because Unity
versions less than 5 are no longer  supported the prefix has been dropped in
favour of finely grained namespaces.&lt;/dd&gt;
&lt;dt&gt;Write your own&lt;/dt&gt;
&lt;dd&gt;&lt;p class="first"&gt;Splitting up  large classes  has a  very pleasant  side effect:  you can now
write  your  own grids,  renderers  and  extension methods.  This  makes  it
possible the extend the framework  to your particular needs just the way you
need it.&lt;/p&gt;
&lt;p class="last"&gt;For version 2.0 the protected  properties of classes are documented as well,
you now  have exactly  the same  power over the  framework as  I do  without
having to modify the original.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;Unified directory&lt;/dt&gt;
&lt;dd&gt;&lt;p class="first"&gt;Last but not least,  all of Grid Framework is now contained in one directory
in your project. T here is nothing to clutter up your project anymore thanks
to improvements to the engine in Unity 5 now that I was able to drop support
for Unity 4.&lt;/p&gt;
&lt;p class="last"&gt;In  particular  this means  that the  &lt;em&gt;WebPlayerTemplates&lt;/em&gt;  directory is  no
longer  being  abused  to  stop  Unity  from compiling  JavaScript  files as
UnityScript.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class="section" id="file-size-comparison"&gt;
&lt;h2&gt;File size comparison&lt;/h2&gt;
&lt;p&gt;When I originally announced the major version update I was looking at the sizes
of the classes in terms of lines of code. Here is the old chart:&lt;/p&gt;
&lt;table border="1" class=" table-striped docutils table-hover table"&gt;
&lt;colgroup&gt;
&lt;col width="38%"&gt;&lt;/col&gt;
&lt;col width="12%"&gt;&lt;/col&gt;
&lt;col width="21%"&gt;&lt;/col&gt;
&lt;col width="15%"&gt;&lt;/col&gt;
&lt;col width="15%"&gt;&lt;/col&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;Class&lt;/th&gt;
&lt;th class="head"&gt;Code&lt;/th&gt;
&lt;th class="head"&gt;Comment&lt;/th&gt;
&lt;th class="head"&gt;Blank&lt;/th&gt;
&lt;th class="head"&gt;Total&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;GFGrid&lt;/td&gt;
&lt;td&gt;520&lt;/td&gt;
&lt;td&gt;512&lt;/td&gt;
&lt;td&gt;104&lt;/td&gt;
&lt;td&gt;1136&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;GFRectGrid&lt;/td&gt;
&lt;td&gt;202&lt;/td&gt;
&lt;td&gt;167&lt;/td&gt;
&lt;td&gt;51&lt;/td&gt;
&lt;td&gt;420&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;GFSphereGrid&lt;/td&gt;
&lt;td&gt;356&lt;/td&gt;
&lt;td&gt;615&lt;/td&gt;
&lt;td&gt;92&lt;/td&gt;
&lt;td&gt;1063&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;GFHexGrid&lt;/td&gt;
&lt;td&gt;1257&lt;/td&gt;
&lt;td&gt;1102&lt;/td&gt;
&lt;td&gt;241&lt;/td&gt;
&lt;td&gt;2600&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;GFPolarGrid&lt;/td&gt;
&lt;td&gt;395&lt;/td&gt;
&lt;td&gt;366&lt;/td&gt;
&lt;td&gt;74&lt;/td&gt;
&lt;td&gt;835&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Even if we ignore the comments these classes are huge,  especially &lt;code&gt;GFHexGrid&lt;/code&gt;.
How do the new grids fare in comparison?&lt;/p&gt;
&lt;table border="1" class=" table-striped docutils table-hover table"&gt;
&lt;colgroup&gt;
&lt;col width="24%"&gt;&lt;/col&gt;
&lt;col width="9%"&gt;&lt;/col&gt;
&lt;col width="15%"&gt;&lt;/col&gt;
&lt;col width="11%"&gt;&lt;/col&gt;
&lt;col width="11%"&gt;&lt;/col&gt;
&lt;col width="30%"&gt;&lt;/col&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;Class&lt;/th&gt;
&lt;th class="head"&gt;Code&lt;/th&gt;
&lt;th class="head"&gt;Comment&lt;/th&gt;
&lt;th class="head"&gt;Blank&lt;/th&gt;
&lt;th class="head"&gt;Total&lt;/th&gt;
&lt;th class="head"&gt;Code reduction&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;Grid&lt;/td&gt;
&lt;td&gt;37&lt;/td&gt;
&lt;td&gt;69&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;111&lt;/td&gt;
&lt;td&gt;93%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;RectGrid&lt;/td&gt;
&lt;td&gt;143&lt;/td&gt;
&lt;td&gt;174&lt;/td&gt;
&lt;td&gt;35&lt;/td&gt;
&lt;td&gt;352&lt;/td&gt;
&lt;td&gt;29%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;SphereGrid&lt;/td&gt;
&lt;td&gt;264&lt;/td&gt;
&lt;td&gt;440&lt;/td&gt;
&lt;td&gt;64&lt;/td&gt;
&lt;td&gt;768&lt;/td&gt;
&lt;td&gt;26%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;HexGrid&lt;/td&gt;
&lt;td&gt;443&lt;/td&gt;
&lt;td&gt;944&lt;/td&gt;
&lt;td&gt;108&lt;/td&gt;
&lt;td&gt;1545&lt;/td&gt;
&lt;td&gt;65%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;PolarGrid&lt;/td&gt;
&lt;td&gt;179&lt;/td&gt;
&lt;td&gt;242&lt;/td&gt;
&lt;td&gt;42&lt;/td&gt;
&lt;td&gt;464&lt;/td&gt;
&lt;td&gt;55%&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;The biggest reduction is in the abstract &lt;code&gt;Grid&lt;/code&gt; class which is the basis of all
grids.  The massive reduction comes from  factoring out the rendering task into
the new flexible  pipeline and the removal  of a lot of redundant API.  At this
point &lt;code&gt;Grid&lt;/code&gt; is just a skeleton of private and protected members.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;HexGrid&lt;/code&gt; has had more  than half of its  code removed,  the largest part of it
was the different ways  to render a hex grid which  are now individual renderer
classes.  The class is still quite large though, because of the many coordinate
systems it has. However, factoring out the coordinate system conversions out of
grids would remove all functionality out of them.&lt;/p&gt;
&lt;p&gt;The other grids  have had less  code reduction because  they were already quite
small,  the  large  API  was  mostly  just  inherited  from  the parent  class.
&lt;code&gt;PolarGrid&lt;/code&gt; has had  a nice reduction  because a lot of  conversions have  been
made into extension methods.&lt;/p&gt;
&lt;p&gt;If you are wondering  why I have more lines  of comments than actual code,  the
reason is  that the  API documentation  is written  inside the  source files as
special comments.  On top of that the proper  way of writing API comments is to
use XML  syntax.  Doxygen can use  other styles  of comments,  but last  time I
checked only XML comments would show up in MonoDevelop during auto completion.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="where-to-go-from-here"&gt;
&lt;h2&gt;Where to go from here&lt;/h2&gt;
&lt;p&gt;As far as features are  concerned I think Grid Framework is very complete.  I'm
still open to suggestions,  but I don't  have any concrete  plans for now.  The
next step is to  step up my presentation,  the introduction video is still from
the initial release and the screenshots are very crude to put it nicely. I also
need  a  better  looking  logo,  made  with  vectors  preferably.  I have  been
experimenting with different illustration software,  but none had to ability to
generate a  nice regular grid,  I need some programmatic solution.  &lt;a class="reference external" href="https://racket-lang.org"&gt;Racket&lt;/a&gt; can
generate vector graphics from code, so I'll try to look into that.&lt;/p&gt;
&lt;p&gt;I would  also  like  to replace  the &lt;a class="reference external" href="http://www.doxygen.nl"&gt;Doxygen&lt;/a&gt;-generated  documentation  with  a
&lt;a class="reference external" href="http://www.sphinx-doc.org/en/stable/"&gt;Sphinx&lt;/a&gt;-based one.  Doxygen is great for extracting documentation comments from
source files,  but the HTML  output is very rigid.  Sphinx lets  me use  &lt;a class="reference external" href="http://jinja.pocoo.org"&gt;Jinja&lt;/a&gt;
templates,  which is something I am already using for this website.  This would
require a C#  domain for Sphinx,  something I have been working on on the side,
but it is nowhere near useful yet.&lt;/p&gt;
&lt;p&gt;Another thing I would  like to do is port Grid Framework  to engines other than
Unity. With version 2.0 the codebase is in a state that is clean enough that it
could be re-written  in another language.  I'm not announcing anything yet,  so
don't hold your breath too long :)&lt;/p&gt;
&lt;p&gt;If you have made  it this far thank  you for reading and  I hope you will enjoy
the improvements.  If you like the  product please  leave a review,  and if you
don't like it tell  me so I can make it better.  Don't forget that you can have
your games showcased on my website as well,  I really want to see what you make
with Grid Framework.&lt;/p&gt;
&lt;/div&gt;
</summary></entry><entry><title>Grid Framework version 1.9.1 released</title><link href="http://hiphish.github.io/grid-framework/news/2016/05/13/version-191/" rel="alternate"></link><published>2016-05-13T00:00:00+02:00</published><updated>2016-05-13T00:00:00+02:00</updated><author><name>HiPhish</name></author><id>tag:hiphish.github.io,2016-05-13:grid-framework/news/2016/05/13/version-191/</id><summary type="html">&lt;p&gt;We are almost  at version 2.0,  but version 1.x  has not been forgotten.  In my
previous post  I was  discussing how  version 2.0  will be  distributed as  one
directory,  including the documentation.  The abuse of the &lt;em&gt;WebPlayerTemplates&lt;/em&gt;
directory has been a thorn in my side since the start, and since the problem is
solved for version 2.0 I have applied the same fix.&lt;/p&gt;
&lt;p&gt;Sadly I was not able to put everything under one directory due to Unity 4:  the
top-level &lt;em&gt;Editor&lt;/em&gt;  directory is necessary,  otherwise the  inspectors will not
display.  The same goes for examples written in UnityScript.  If you don't need
the examples you can throw them away, but the &lt;em&gt;Editor&lt;/em&gt; directory has to stay.&lt;/p&gt;
&lt;p&gt;None of these  issues exist in Unity 5,  but version 1.x has to support Unity 4
as well,  so there  is nothing  I can do.  Grid Framework  version 2.0  will be
exclusive to Unity 5.&lt;/p&gt;
</summary></entry><entry><title>Grid Framework version 1.9.0 released</title><link href="http://hiphish.github.io/grid-framework/news/2015/12/14/version-190/" rel="alternate"></link><published>2015-12-14T00:00:00+01:00</published><updated>2015-12-14T00:00:00+01:00</updated><author><name>HiPhish</name></author><id>tag:hiphish.github.io,2015-12-14:grid-framework/news/2015/12/14/version-190/</id><summary type="html">&lt;p&gt;Version 1.9.0 of Grid Framework has been approved by the Asset Store team. This
release  marks  the addition  of  the fourth  kind  of  grid to  the framework:
spherical grids.&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;img alt="Rotating spheric grid animation" class="img-responsive" src="http://hiphish.github.io/grid-framework/news/2015/12/14/version-190/images/rotating-grid-2.gif"/&gt;
&lt;/div&gt;
&lt;p&gt;The full changelog:&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;em&gt;New:&lt;/em&gt; A new grid type, spherical grids.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Manual:&lt;/em&gt; Chapter with frequently used code snippets.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;This may not  look like much,  but spherical grids have  been on the to-do list
since day  one, so  this is  a major  step. The  other change  is a  new manual
chapter that contains  useful snippets based  on frequent questions people have
asked over the years. I hope you find it useful.&lt;/p&gt;
&lt;p&gt;I'm not quite sure  what to do next.  I have been having second  thoughts about
pathfinding  because there  are many  ways to  implement it  and all have their
strengths and  weaknesses, there  is no  ideal solution. It  might be better to
provide an easy interface  for an existing pathfinding solution instead. If you
are using the popular  &lt;a class="reference external" href="http://arongranberg.com/astar/"&gt;A*&lt;/a&gt; plugin for Unity  there will be something about it
in the next article.&lt;/p&gt;
&lt;p&gt;There is also  triangular grids,  which are just  a &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Triangular_tiling"&gt;triangular tiling&lt;/a&gt; of hex
grids, so if  I can't think of anything  else I'll go for that instead.  If you
have a better idea just drop me a line.&lt;/p&gt;
</summary></entry><entry><title>Grid Framework version 1.8.4 released</title><link href="http://hiphish.github.io/grid-framework/news/2015/11/23/version-184/" rel="alternate"></link><published>2015-11-23T00:00:00+01:00</published><updated>2015-11-23T00:00:00+01:00</updated><author><name>HiPhish</name></author><id>tag:hiphish.github.io,2015-11-23:grid-framework/news/2015/11/23/version-184/</id><summary type="html">&lt;p&gt;Version 1.8.4 of Grid Framework has been released. This version updates
Vectrosity support to Vectrosity version 5, and it also changes how support for
other plugins is enabled. It also introduces a new example: an endless grid in
3D space.&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;em&gt;Changed:&lt;/em&gt; Support for Vectrosity and Playmaker needs to be enabled
explicitly now. Please consult the user manual chapter about plugins.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Fixed:&lt;/em&gt; Updated Vectrosity support and examples to version 5.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;New:&lt;/em&gt; A new example showcases an infinite grid in 3D.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;Plugin support needs to be enabled by defining preprocessor symbols in your
project. The Unity user manual has a &lt;a class="reference external" href="http://docs.unity3d.com/Manual/PlatformDependentCompilation.html"&gt;chapter&lt;/a&gt; on the
topic; my personal choice is to define the symbols project-wide. For that
purpose create a file called &lt;code&gt;smcs.rsp&lt;/code&gt; with the following example contents:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
-define:GRID_FRAMEWORK_VECTROSITY
-define:GRID_FRAMEWORK_VECTROSITY_4

-define:GRID_FRAMEWORK_PLAYMAKER
&lt;/pre&gt;
&lt;p&gt;The first line enables support for Vectrosity in general and the second line
enables support for Vectrosity 4, which is the legacy version, over whatever
other version might exist. If only the first line is defined the latest version
of Vectrosity is supported.  In the future I will add other symbols as the need
arises, such as when Vectrosity 5 becomes the legacy version.&lt;/p&gt;
&lt;p&gt;For Playmaker there is only one symbol. If you also want to use UnityScript you
should define a file called &lt;code&gt;us.rsp&lt;/code&gt; with the same contents as well. This way
is much cleaner and easier to manage than the way it was done before.&lt;/p&gt;
</summary></entry><entry><title>Grid Framework version 1.8.0 released</title><link href="http://hiphish.github.io/grid-framework/news/2015/03/11/version-180/" rel="alternate"></link><published>2015-03-11T00:00:00+01:00</published><updated>2015-03-11T00:00:00+01:00</updated><author><name>HiPhish</name></author><id>tag:hiphish.github.io,2015-03-11:grid-framework/news/2015/03/11/version-180/</id><summary type="html">&lt;p&gt;Version 1.8.0 of Grid Framework has been approved by the Asset Store team. This
release introduces a new rendering shape for hex grid: the circle. Of course,
like with polar grids, just because it's called a circle that does not mean you
are limited to just circles, you can decide on the start and end "angle" or
have a hole in the centre to create a ring.&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;img alt="Screenshot of circular hex arrangement" class="img-responsive" src="http://hiphish.github.io/grid-framework/news/2015/03/11/version-180/images/hex_circle.png"/&gt;
&lt;/div&gt;
&lt;p&gt;The shape can be drawn around any hex, not just the origin. Here is the full
changelog:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Introducing a new rendering shape for hex grids.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;em&gt;New:&lt;/em&gt; Hex grids can render in a circular shape.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;New:&lt;/em&gt; &lt;tt class="docutils literal"&gt;renderAround&lt;/tt&gt; property on hex grids for the new shape.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Fixed:&lt;/em&gt; Size and rendering range not showing up properly in the inspector.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
</summary><category term="old-blog"></category></entry><entry><title>Grid Framework version 1.7.4 released</title><link href="http://hiphish.github.io/grid-framework/news/2015/03/01/version-174/" rel="alternate"></link><published>2015-03-01T00:00:00+01:00</published><updated>2015-03-01T00:00:00+01:00</updated><author><name>HiPhish</name></author><id>tag:hiphish.github.io,2015-03-01:grid-framework/news/2015/03/01/version-174/</id><summary type="html">&lt;p&gt;Grid Framework version 1.7.4 has been approved by the Asset Store team. This
release brings official support for Unity 5, so feel free to upgrade. Unity 4
is still supported, thanks to the changes to the Asset Store I can now upload
separate packages for different versions of Unity.&lt;/p&gt;
&lt;p&gt;There are no API changes, so it doesn't matter whether you want to use Unity 4
or 5. The only real difference between packages are the example scenes. The
formats Unity 5 uses are different from 4, so a package created in Unity 5
would appear broken in 4.&lt;/p&gt;
</summary><category term="old-blog"></category></entry><entry><title>Grid Framework version 1.7.2 released</title><link href="http://hiphish.github.io/grid-framework/news/2015/01/21/version-172/" rel="alternate"></link><published>2015-01-21T00:00:00+01:00</published><updated>2015-01-21T00:00:00+01:00</updated><author><name>HiPhish</name></author><id>tag:hiphish.github.io,2015-01-21:grid-framework/news/2015/01/21/version-172/</id><summary type="html">&lt;p&gt;Version 1.7.2 of Grid Framework has been approved by the Asset Store team. This release and the previous one provide bugfixes:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;strong&gt;Fixed:&lt;/strong&gt; Null exception on polar grids when getting Vectrosity points if the grid is not being rendered.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For version 1.7.1:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;strong&gt;Fixed:&lt;/strong&gt; The grid align panel now correctly respect or ignores rotation when auto-snapping.&lt;/li&gt;
&lt;/ul&gt;
</summary><category term="old-blog"></category></entry><entry><title>Grid Framework version 1.7.0 released</title><link href="http://hiphish.github.io/grid-framework/news/2014/12/11/version-170/" rel="alternate"></link><published>2014-12-11T00:00:00+01:00</published><updated>2014-12-11T00:00:00+01:00</updated><author><name>HiPhish</name></author><id>tag:hiphish.github.io,2014-12-11:grid-framework/news/2014/12/11/version-170/</id><summary type="html">&lt;p&gt;Version 1.7.0 of Grid Framework has just been approved by the Asset Store team.
This release brings some more love for hexagonal grids in the form of two new
coordinate systems and four new rendering shapes.&lt;/p&gt;
&lt;p&gt;The new coordinate systems are the downwards herringbone coordinate system
where every second column is shifted down- instead of upwards and the downwards
rhombic coordinate system where each successive column is shifted one hex down-
instead of upwards.&lt;/p&gt;
&lt;p&gt;Two of the new rendering shapes are downwards rectangle and downwards rhombus
to go with the new coordinate systems. The two completely new rendering shapes
are the up- and downwards herringbone grids. Unlike the other shapes these ones
are continuous and expand smoothly.&lt;/p&gt;
&lt;p&gt;Notice how the grid on the left-had side shifts ever odd column upwards and the
grid on the right-had side shifts ever odd column downwards.&lt;/p&gt;
&lt;p&gt;Here is the full change log:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;em&gt;New:&lt;/em&gt; Downwards herringbone coordinate system for hex grids&lt;/li&gt;
&lt;li&gt;&lt;em&gt;New:&lt;/em&gt; Downwards rectangle rendering shape to accompany the new coordinate system.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;New:&lt;/em&gt; Downwards rhombic coordinate system.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;New:&lt;/em&gt; Downwards rhombic rendering shape to accompany the new coordinate system.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;New:&lt;/em&gt; Up- and downwards herringbone rendering shape.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Fixed:&lt;/em&gt; The grid align panel now correctly respect or ignores rotation when aligning.&lt;/li&gt;
&lt;/ul&gt;
</summary><category term="old-blog"></category></entry><entry><title>Grid Framework version 1.5.3 released</title><link href="http://hiphish.github.io/grid-framework/news/2014/11/07/version-153/" rel="alternate"></link><published>2014-11-07T00:00:00+01:00</published><updated>2014-11-07T00:00:00+01:00</updated><author><name>HiPhish</name></author><id>tag:hiphish.github.io,2014-11-07:grid-framework/news/2014/11/07/version-153/</id><summary type="html">&lt;p&gt;Grid Framework version 1.5.3 has been approved by the Asset Store team. This
release brings compatibility with the upcoming Unity 5.&lt;/p&gt;
&lt;p&gt;Grid Framework itself was compatible, but a number of examples used properties
that have been removed in Unity 5. Those are properties that secretly called
GetComponent, but looked like regular variables.&lt;/p&gt;
&lt;p&gt;And while I'm at it, here is a little teaser for the next feature update:
rhombic hex grid rendering&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;img alt="Screenshot of rhombic hex arrangement" class="img-responsive" src="http://hiphish.github.io/grid-framework/news/2014/11/07/version-153/images/rhombic.png"/&gt;
&lt;/div&gt;
</summary><category term="old-blog"></category></entry><entry><title>Grid Framework version 1.5.2 released</title><link href="http://hiphish.github.io/grid-framework/news/2014/11/06/version-152/" rel="alternate"></link><published>2014-11-06T00:00:00+01:00</published><updated>2014-11-06T00:00:00+01:00</updated><author><name>HiPhish</name></author><id>tag:hiphish.github.io,2014-11-06:grid-framework/news/2014/11/06/version-152/</id><summary type="html">&lt;p&gt;Grid Framework version 1.5.2 has just been approved of by the Asset Store team.
This release is a bugfix for polar grids where the cylindric lines have not
been calculated properly if the depth of the grid was not 1.&lt;/p&gt;
&lt;p&gt;Another thing you might notice is that the engine requirements have been
knocked down to Unity version 3.5.7, the latest release of Unity 3. While Grid
Framework has always been compatible with Unity 3, I have been using Unity 4
for deployment so far. Now the compatibility with Unity 3 is official.&lt;/p&gt;
&lt;p&gt;Compatibility with Unity 5 is coming with the next update; it's nothing major,
but some of the examples did not compile due to deprecated properties.&lt;/p&gt;
</summary><category term="old-blog"></category></entry><entry><title>Grid Framework version 1.5.1 released</title><link href="http://hiphish.github.io/grid-framework/news/2014/10/01/version-151/" rel="alternate"></link><published>2014-10-01T00:00:00+02:00</published><updated>2014-10-01T00:00:00+02:00</updated><author><name>HiPhish</name></author><id>tag:hiphish.github.io,2014-10-01:grid-framework/news/2014/10/01/version-151/</id><summary type="html">&lt;p&gt;This release is a hotfix for everyone who was using Playmaker&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Fixed: Compilation errors when toggling on Playmaker actions.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Playmaker actions wil compile correctly now, anyone else was unaffected. So
what happened? One of the problems when developing an extension that relies on
another extension is that it will not compile if the dependency is not present.
For Vectrosity is was easy, I just needed to assemble and array and the user
would then send it over to Vectrosity. Or not, you could do something entirely
different with it as well if you wanted, it's just an array of Vector3.&lt;/p&gt;
&lt;p&gt;Playmaker is different though, the actions are classes derived from Playmaker
classes, so if you don't own Playmaker the code will not compile. My solution
was to do the following:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
//#define PLAYMAKER_PRESENT
#ifdef PLAYMAKER_PRESENT
// code goes here
#endif //PLAYMAKER_PRESENT
&lt;/pre&gt;
&lt;p&gt;This means the code will only compile if the keyword PLAYMAKER_PRESENT is
defined, which it isn't since the first line is commented. To make the scripts
compile you have to toggle them on through a menu item which then edits the
scripts to un-comment or comment that line. Before I submit a new release I
have to toggle the actions off and so I missed the compilation errors.&lt;/p&gt;
&lt;p&gt;It's still a bad oversight on my side and I'm not trying to excuse my failure,
but I wanted to share how this can happen. A better solution would be if
plugins could define keywords globally, then Playmaker could announce its
existence on its own instead of having to toggle things manually.&lt;/p&gt;
</summary><category term="old-blog"></category></entry><entry><title>Grid Framework version 1.5.0 released</title><link href="http://hiphish.github.io/grid-framework/news/2014/09/16/version-150/" rel="alternate"></link><published>2014-09-16T00:00:00+02:00</published><updated>2014-09-16T00:00:00+02:00</updated><author><name>HiPhish</name></author><id>tag:hiphish.github.io,2014-09-16:grid-framework/news/2014/09/16/version-150/</id><summary type="html">&lt;p&gt;Grid Framework version 1.5.0 has been approved by the Asset Store team. This
version brings a great new feature for anyone interested in making isometric 2D
games: shearing. Shearing allows you to slant a rectangular grid's axes without
having to rotate the grid. Up until now the only way to achieve the isometric
look was to rotate the grid or the camera in 3D space, but in 2D games the
camera has to be perpendicular to the image plane and thus the grid as well.
Now all you need to do is just set the shearing of the axes and you're good to
go, everything else stays the way it was.&lt;/p&gt;
&lt;p&gt;The shearing is stored in a new type called &lt;em&gt;Vector6&lt;/em&gt; that works very much like
Unity's own &lt;em&gt;Vector3&lt;/em&gt;. The &lt;em&gt;Vector6&lt;/em&gt; class resides in the new GridFramework.
Vectors name space to prevent name collision with other custom types or a
possible future official &lt;em&gt;Vector6&lt;/em&gt; type from Unity.&lt;/p&gt;
&lt;p&gt;the &lt;em&gt;GFBoolVector3&lt;/em&gt; and &lt;em&gt;GFColorVector3&lt;/em&gt; classes have also been moved to that
namespace and had their "GF" prefix stripped away. If you used them in your own
scripts strip away the prefix and place a using directive at the start of your
script, otherwise you have to do nothing.&lt;/p&gt;
&lt;p&gt;Here is the full change log:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Introducing shearing for rectangular grids.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;New: Rectangular grids can now store a &lt;code&gt;shearing&lt;/code&gt; field to distort them.&lt;/li&gt;
&lt;li&gt;New: Custom &lt;code&gt;Vector6&lt;/code&gt; class for storing the shearing.&lt;/li&gt;
&lt;li&gt;API change: The odd herringbone coordinate system has been renamed to
upwards herringbone. The corresponding methods use the &lt;code&gt;HerringU&lt;/code&gt; pre- or
suffix instead of &lt;code&gt;HerringOdd&lt;/code&gt;; the old methods still work but are marked
as depracated.&lt;/li&gt;
&lt;li&gt;API change: The enumeration &lt;code&gt;GFAngleMode&lt;/code&gt; has been renamed &lt;code&gt;AngleMode&lt;/code&gt; and
moved into the &lt;code&gt;GridFramework&lt;/code&gt; namespace.&lt;/li&gt;
&lt;li&gt;API change: The enumeration &lt;code&gt;GridPlane&lt;/code&gt; has been moved into the
&lt;code&gt;GridFramework&lt;/code&gt; namespace. It is no longer part of the &lt;code&gt;GFGrid&lt;/code&gt; class.&lt;/li&gt;
&lt;li&gt;API change: The class &lt;code&gt;GFColorVector3&lt;/code&gt; has been renamed &lt;code&gt;ColorVector3&lt;/code&gt; and
moved into the &lt;code&gt;GridFramework.Vectors&lt;/code&gt; namespace.&lt;/li&gt;
&lt;li&gt;API change: The class &lt;code&gt;GFBoolVector3&lt;/code&gt; has been renamed &lt;code&gt;BoolVector3&lt;/code&gt; and
moved into the &lt;code&gt;GridFramework.Vectors&lt;/code&gt; namespace.&lt;/li&gt;
&lt;li&gt;Enhanced: Vectrosity methods without parameters can now pick betweem size
and custom range automatically.&lt;/li&gt;
&lt;li&gt;Fixed: Vectrosity methods were broken in previous version.&lt;/li&gt;
&lt;li&gt;Updated the documentation.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
</summary><category term="old-blog"></category></entry><entry><title>Grid Framework version 1.4.1 released</title><link href="http://hiphish.github.io/grid-framework/news/2014/05/09/version-141/" rel="alternate"></link><published>2014-05-09T00:00:00+02:00</published><updated>2014-05-09T00:00:00+02:00</updated><author><name>HiPhish</name></author><id>tag:hiphish.github.io,2014-05-09:grid-framework/news/2014/05/09/version-141/</id><summary type="html">&lt;p&gt;Actually it has been up for almost a month already, but I have been busy.
Anyway, this is the long-awaited release that brings PlayMaker support to Grid
Framework, so here is the change log:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Introducing Playmaker support: Almost the entire Grid Framework API can no be
used as Playmaker actions (some parts of the API are ouside the capabilies of
Playmaker for now)&lt;/li&gt;
&lt;li&gt;Updated the documentation to include a chapter about Playmaker and how to
write your own Grid Framework actions.&lt;/li&gt;
&lt;li&gt;Fixed: the origin offset resetting every time after exiting play mode.&lt;/li&gt;
&lt;li&gt;Fixed compilation error in one of the Playmaker actions (setter and getter
for depth of layered grids)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you're wondering why I skipped 1.4.0, it's because I discovered a bug right
after submission, so I submitted 1.4.1 right afterwards, thus skipping over the
release of 1.4.0. As always you can read about how to use the new PlayMaker
actions or write your own ones  in the documentation.&lt;/p&gt;
&lt;p&gt;As for future plans for Grid Framework, I still have a place that I want to
optimise before considering new features, and it will require a good amount of
digging, but the result will be cleaner and easier to maintain code.&lt;/p&gt;
</summary><category term="old-blog"></category><category term="extension"></category></entry><entry><title>Grid Framework version 1.3.5 released</title><link href="http://hiphish.github.io/grid-framework/news/2013/12/10/version-135/" rel="alternate"></link><published>2013-12-10T00:00:00+01:00</published><updated>2013-12-10T00:00:00+01:00</updated><author><name>HiPhish</name></author><id>tag:hiphish.github.io,2013-12-10:grid-framework/news/2013/12/10/version-135/</id><summary type="html">&lt;p&gt;Grid Framework version 1.3.5 has been approved last week, here is the
changelog:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Added a new event for when the grid changes in such a way that if would need
to be redrawn.&lt;/li&gt;
&lt;li&gt;Some of the exmples were broken when Unity updated to version 4.3, now they
should be working again.&lt;/li&gt;
&lt;li&gt;Overhauled the undo system for the grid align panel to remove the now
obsolete Unity undo methods.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I promised I would be working on Playmaker support, so what's going on here? I
have been bogged down a lot with studies and real life stuff oder the last
months (nothing bad though, don't worry), so things were going slowly, but they
were moving. The current problem is Playmaker itself; from what I have used it
is a fantastic system to crate game logic and totally worth it, however, when
it comes to extending it things aren't that nice anymore.&lt;/p&gt;
&lt;p&gt;I am in contact with a staff member who is helping me out, so I'm not entirely
reliant on the lackluster documentation, but there is a lot of ugly code
redundancy that cannot be avoided. I'm still working on it and it will come out
eventually, but it will take more time. How much? I don't really know, it
depends on how rigid or flexible Playmaker turns out to be.&lt;/p&gt;
</summary><category term="old-blog"></category></entry><entry><title>Grid Framework version 1.3.4 released</title><link href="http://hiphish.github.io/grid-framework/news/2013/09/20/version-134/" rel="alternate"></link><published>2013-09-20T00:00:00+02:00</published><updated>2013-09-20T00:00:00+02:00</updated><author><name>HiPhish</name></author><id>tag:hiphish.github.io,2013-09-20:grid-framework/news/2013/09/20/version-134/</id><summary type="html">&lt;p&gt;This is a small update, it adds the ability to offset the origin of the grid.
It also adds a chapter to the manual about extending Grid Framework with your
own code. There is nothing in there experienced .NET user wouldn't know, but I
figure some user might not know about extension methods and might do things in
a hacky way, so I added the chapter to it, along with example code.&lt;/p&gt;
</summary><category term="old-blog"></category></entry><entry><title>Grid Framework version 1.3.3 released</title><link href="http://hiphish.github.io/grid-framework/news/2013/08/28/version-133/" rel="alternate"></link><published>2013-08-28T00:00:00+02:00</published><updated>2013-08-28T00:00:00+02:00</updated><author><name>HiPhish</name></author><id>tag:hiphish.github.io,2013-08-28:grid-framework/news/2013/08/28/version-133/</id><summary type="html">&lt;p&gt;Grid Framework version 1.3.3 has been approved by the Asset Store team. This
update adresses a bug introduced in version 1.3.2 where values of colour
vectors (such as axisColor) and bool vectors were not persistent. Now they will
stick again. I also broke the examples for the sliding puzzle and movement with
obstacles, which are now fixed. Based upon a customer's question I also built a
snake game example; it's mostly an extension of the grid-based movement but
with several snake segments following each other.&lt;/p&gt;
&lt;p&gt;And last, but for some people certainly not least, if you delete the local
documentation (found in the WebPlayerTemplates folder) the help menu entry will
forward you to an online documentation instead. Some customers complained about
me cluttering their project with that folders, and they are right, but
unfortunately that's the only place where I can place the files, or else Unity
will try to compile the JavaScript files and throw a ton of errors.&lt;/p&gt;
&lt;p&gt;The documentation files are all contained in that one folder, so you can either
uncheck it when importing, delete the folder after import or move it somewhere
else. I know this is inconvenient, but unless Unity provides me with a proper
way to bundle offline documentation this is the best I can do.&lt;/p&gt;
</summary><category term="old-blog"></category></entry><entry><title>Grid Framework version 1.3.2 released</title><link href="http://hiphish.github.io/grid-framework/news/2013/08/09/version-132/" rel="alternate"></link><published>2013-08-09T00:00:00+02:00</published><updated>2013-08-09T00:00:00+02:00</updated><author><name>HiPhish</name></author><id>tag:hiphish.github.io,2013-08-09:grid-framework/news/2013/08/09/version-132/</id><summary type="html">&lt;p&gt;Version 1.3.2 of Grid Framework has been approved by the Asset Store Team. The
biggest news is the  addition of new coordinate systems for hexagonal grids.
You have cubic coordinates, rhombic coordinates and the old odd herringbone
coordinates now. Even herringbone and barycentric coordinates will be added at
some point in the future for the sake of completion, but they are no priority.&lt;/p&gt;
&lt;p&gt;The documentation received a complete overhaul. Rather than two manually typed
PDFs you now have one automatically generated Doxygen documentation in HTML
format. Previously you accessed it by double-clicking the PDF in your project
view, not you can just go to Unity's help menu and the documentation will open
up in your browser.&lt;/p&gt;
&lt;p&gt;The user manual and scripting API are now together again. The top- and sidebar
of the HTML can be used to quickly find what you want. There is also a new
section called Legacy Support that contains information on changed or dropped
features and how to restore them or upgrade your code. The changelog has also
been added to the manual, thanks to Markdown you now have both a nicely
formatted HTMl and a well readable plain text file.&lt;/p&gt;
&lt;p&gt;There are also two new examles. The first example constructs a SimCity-like
terrain mesh from a plain text file containing the heights as integers and
allows you raise and lower vertices by clicking them. Just set up your grid,
insert your height file and click play.&lt;/p&gt;
&lt;p&gt;The other example uses polar grids to simulate a rotary dial, as found on old
telephones. Click a number and the dial will rotate that much, print a message
and then rotate back. This example can be used for circular GUIs, menus, clocks
or anything else that needs to rotate around angles.&lt;/p&gt;
&lt;p&gt;There is also the usual bug-fixing, vertex matrix methods got cut and the
NearestFace/BoxG methods of rectangular grids have changed somewhat. You can
find the exact details in the Legacy Support section of the documentation. Here
is the full changelog:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Hex Grids: new coordinate systems, see the manual page about @ref hex_grid
for more information.&lt;/li&gt;
&lt;li&gt;New HTML documentation generated with Doxygen replaces the old one.&lt;/li&gt;
&lt;li&gt;Fixed a bug in &lt;tt class="docutils literal"&gt;Angle2Rotation&lt;/tt&gt; when the grid's rotation was not a multiple
of 90°.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;New example:&lt;/em&gt; generate a terrain mesh similar to old games like SimCity from
a plain text file and have it align to a grid.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;New example:&lt;/em&gt; a rotary phone dial that rotates depending on which number was
clicked and reports that number back. A great template for disc-shaped GUIs.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Some existing methods have changed in this release, please consult the @ref
legacy_support page of the user manual.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Rect Grids: changed the way &lt;tt class="docutils literal"&gt;NearestBoxG&lt;/tt&gt; works, now there is no offset
anymore, it returns the actual grid coordinates of the box. Just add &lt;tt class="docutils literal"&gt;0.5 *
Vector.one&lt;/tt&gt; to the result in your old methods.&lt;/li&gt;
&lt;li&gt;Rect Grids: changed the way &lt;tt class="docutils literal"&gt;NearestFaceG&lt;/tt&gt; works, just like above. Add
&lt;tt class="docutils literal"&gt;0.5 * Vector3.one - 0.5 * i&lt;/tt&gt; to the result in your old methods (where
&lt;tt class="docutils literal"&gt;i&lt;/tt&gt; is the index of the plane you used).&lt;/li&gt;
&lt;li&gt;Hex grids: Just like above, nearest vertices of hex grids return their true
coordinates for whatever coordinate system you choose.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I am sorry for these changes so late , but I realize this differentiation made
things more complicated in the end than they should have been. It's better to
have one unified coordinate system instead. Read the @ref legacy_support to
learn how to get the old behaviour back.&lt;/p&gt;
</summary><category term="old-blog"></category></entry><entry><title>Grid Framework version 1.3.0 released</title><link href="http://hiphish.github.io/grid-framework/news/2013/06/17/version-130/" rel="alternate"></link><published>2013-06-17T00:00:00+02:00</published><updated>2013-06-17T00:00:00+02:00</updated><author><name>HiPhish</name></author><id>tag:hiphish.github.io,2013-06-17:grid-framework/news/2013/06/17/version-130/</id><summary type="html">&lt;p&gt;Grid Framework version 1.3.0 has been approved by the Asset Store team. The
biggest features of this release is the addition of polar grids. Check out the
updated included examples to see them right in action. Notice how in the
lights-out example the coordinates wrap around, maning that once you've
exceeded the maximum angle it start from the beginning again without you having
to worry about anything.&lt;/p&gt;
&lt;p&gt;Even if you prefer the good old rectangular- and hex grids you'll want to take
a look at the updated API: You can now get the direction vectors for up,
forwarad and right or north, north-east, east, south-east and so on just by
calling one command. This will make grid-based movement much easier, since you
don't have to convert back and forth between grid- and world space anymore.&lt;/p&gt;
&lt;p&gt;On top of that the lights-out and the runtime snapping example showcase how to
dynamially generate meshes from grids. The tiles of the polar lights game are
all individual meshes that fit exactly inside the idividual faces. When the
game starts the attached script runs a loop that runs through the grid and
creates the needed vertices and triangles and then assigns the proper
materials.&lt;/p&gt;
&lt;p&gt;Here is the full changelog:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;added up, right and forward members to rectangular grids&lt;/li&gt;
&lt;li&gt;added sides, width and height members to hex grids&lt;/li&gt;
&lt;li&gt;added the enum GFAngleMode {radians, degree} to specify an angle type;
currently only used in methods of polar grids&lt;/li&gt;
&lt;li&gt;added the enum HexDirection for cardinal directions (north, north-east, east,
...) in hex grids&lt;/li&gt;
&lt;li&gt;added the GetDirection method to hex grids to convert a cardinal direction to
a world space direction vector&lt;/li&gt;
&lt;li&gt;hex grids and polar grids now both inherit from GFLayeredGrid, which in
return inherits from GFGrid&lt;/li&gt;
&lt;li&gt;the Lights Off example now features a polar grid as well&lt;/li&gt;
&lt;li&gt;procedural mesh generation for grid faces in the Lights Off example&lt;/li&gt;
&lt;li&gt;mouse handling in runtime snapping example changed because it was confusing a
lot of users who just copy-pasted the code&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Please note that this version officially requires Unity 4, since that is what I
was building with, but there is no new API used and the scripts will run just
fine in Unity 3.&lt;/p&gt;
</summary><category term="old-blog"></category></entry><entry><title>Version 1.3.0 submitted</title><link href="http://hiphish.github.io/grid-framework/news/2013/06/12/version-130-submit/" rel="alternate"></link><published>2013-06-12T00:00:00+02:00</published><updated>2013-06-12T00:00:00+02:00</updated><author><name>HiPhish</name></author><id>tag:hiphish.github.io,2013-06-12:grid-framework/news/2013/06/12/version-130-submit/</id><summary type="html">&lt;p&gt;A quick heads-up, version 1.3.0 has finally been submitted to the Asset Store.
Remember, the price will go up to 25$, so if you still want it for 20$ now is
the time to buy.&lt;/p&gt;
</summary><category term="old-blog"></category></entry><entry><title>Grid Framework version 1.2.5 released</title><link href="http://hiphish.github.io/grid-framework/news/2013/05/17/version-125/" rel="alternate"></link><published>2013-05-17T00:00:00+02:00</published><updated>2013-05-17T00:00:00+02:00</updated><author><name>HiPhish</name></author><id>tag:hiphish.github.io,2013-05-17:grid-framework/news/2013/05/17/version-125/</id><summary type="html">&lt;p&gt;This release serves as a preparation for Version 1.3.0, which will add polar
grids&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The methods NearestVertex/Face/BoxW and NearestVertex/Face/BoxG replace
FindNearestVertex/Face/Box and GetVertex/Face/BoxCoordinates respectively.
This is just a change in name, as the old nomencalture was confusing and
makes no sense for grids with multiple coordinate systems, but the syntax
stays the same. The old methods will throw compiler warnings but will still
work fine. You can run a Search&amp;amp;Replace through your scripts to get rid of
them.&lt;/li&gt;
&lt;li&gt;The GFBoolVector3 class can now be instantiated via GFBoolVector3.True and
GFBoolVector3.False to create an all-true or all-false vector&lt;/li&gt;
&lt;li&gt;Similarly you use GFColorVector3.RGB, GFColorVector3.CMY and
GFColorVector3.BGW for half-transparent standard colour vectors&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I apologize for the inconvenience of having to rename the methods, but I'll try
to explain my reasoning. When Grid Framework was originally conceived only
rectangular grids were in place. For rectangular grids only one coordinate
system really makes sense, so there were two spaces: world space and grid
space. Consequently, every point could only exist in either of those two.&lt;/p&gt;
&lt;p&gt;One of the most basic needs I implemented back then was to find the nearest
vertex of a point, hence the name FindNearestVertex, and later the same for
faces and boxes. I also needed a similar method for grid space, I wanted to get
the point's grid coordinates.&lt;/p&gt;
&lt;p&gt;The problem arises when you start having more than just one grid space. When I
wrote hex grids I always considered the possibility of having a second
coordinate system aside from the herringbone pattern, and that's when I should
have realized that my naming convention was... well, stupid. Polar grids will
have two coordinate systems from the start, so I had the choice to either use
some band-aid solution and have a naming convention that makes even less sense,
or I could make a clean cut here and now.&lt;/p&gt;
&lt;p&gt;So, what does this mean for you? At the moment nothing aside from a bunch of
compiler warnings. You can just ignore them if you want, the old methods are
still in place, they just call the new ones instead. I don't have any intention
of removing them anytime soon, so you don't need to rush ahead and replace your
old calls. The syntax has stayed the same, so running a quick Search&amp;amp;Replace
will fix things for good.&lt;/p&gt;
&lt;p&gt;The new naming convention goes as follows (without the brackets):
Nearest[Vertex/Face/Box][X], where X stands for the coordinate system in
question. For world it's W, for grid it's G and for the upcoming polar
coordinates it will be P. Obviously only W and G make sense for all grids, the
rest depends on the specific type of grid. You will be able to convert a point
from any system into another (like PolarToWord).&lt;/p&gt;
&lt;p&gt;I am sincerely sorry for this, but please understand that this was a necessary
step in order for Grid Framework to remain clean. I always find things to
improve and tweak, but most of them are under the hood and go by unmentioned,
it just happened that this one was on the surface.&lt;/p&gt;
</summary><category term="old-blog"></category></entry><entry><title>Grid Framework version 1.2.4 released</title><link href="http://hiphish.github.io/grid-framework/news/2013/04/03/version-124/" rel="alternate"></link><published>2013-04-03T00:00:00+02:00</published><updated>2013-04-03T00:00:00+02:00</updated><author><name>HiPhish</name></author><id>tag:hiphish.github.io,2013-04-03:grid-framework/news/2013/04/03/version-124/</id><summary type="html">&lt;p&gt;Version 1.2.4 has been approved by the Asset Store team. Here are the new
features:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;a caching feature that keeps the activity of the grabage collector low now,
instead of re-calculating the end points of lines every frame we can re-use
them instead as long as the grid hasn't been modified.&lt;/li&gt;
&lt;li&gt;a new example shows you how to create seemingly endless grids without the
overhead of actually having a gigantic grid&lt;/li&gt;
&lt;li&gt;explanations about rendering performance in the user manual&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Enjoy the new performance improvement and thank you for your support.&lt;/p&gt;
</summary><category term="old-blog"></category></entry><entry><title>Grid Framework version 1.2.3 released</title><link href="http://hiphish.github.io/grid-framework/news/2013/02/28/version-123/" rel="alternate"></link><published>2013-02-28T00:00:00+01:00</published><updated>2013-02-28T00:00:00+01:00</updated><author><name>HiPhish</name></author><id>tag:hiphish.github.io,2013-02-28:grid-framework/news/2013/02/28/version-123/</id><summary type="html">&lt;p&gt;This update brings you two new features, both were suggested by customers. The
first one is the ability to set a separate set of colours for rendering instead
of using the same colours as for drawing. Let's say you want a barely visible
grid in the game but a clearly visible grid in the editor. Until now you either
had had to have two grids or use a script to change the colours once the game
starts. Both options worked fine but required more work than needed, now you
can do it out of the box. Of course it is entirely optional, so if you don't
set anything you will be using the same colours for rendering and drawing.&lt;/p&gt;
&lt;p&gt;The other new feature is relative size. Usually the size and the
renderFrom/renderTo vectors were interpreted as absolute world unit lengths. I
did this intentionally so the grid's size would be independent from its spacing
(or radius and depth for hex grids). Of course not everyone is concerned about
that sort of thing, some people would simply like to say "make my grid this
many blocks tall" instead of having to multiply the desired size with the
spacing. Turning on relative size now does exactly that for you. Here is a
visual example where the values are interpreted as absolute (left) and relative
(right) length:&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;img alt="some image" class="img-responsive" src="http://hiphish.github.io/grid-framework/news/2013/02/28/version-123/images/inspector-relative.png"/&gt;
&lt;/div&gt;
</summary><category term="old-blog"></category></entry><entry><title>Grid Framework version 1.2.2 released</title><link href="http://hiphish.github.io/grid-framework/news/2013/02/12/version-122/" rel="alternate"></link><published>2013-02-12T00:00:00+01:00</published><updated>2013-02-12T00:00:00+01:00</updated><author><name>HiPhish</name></author><id>tag:hiphish.github.io,2013-02-12:grid-framework/news/2013/02/12/version-122/</id><summary type="html">&lt;p&gt;Update time. Let's go over what's new:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;New example:&lt;/strong&gt; sliding block puzzle&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;img alt="Screenshot of sliding puzzle example" class="img-responsive" src="http://hiphish.github.io/grid-framework/news/2013/02/12/version-122/images/sliding-puzzle.png"/&gt;
&lt;/div&gt;
&lt;p&gt;It might not look like much, but this is the most advanced example yet; it's
similar to the movement with obstacles example where we use a matrix to store
which tiles are allowed and which are forbidden. The tricky part is that now
objects can span more than one tile and all of them have to be free. The
solution is to break up the obstacle into one tile large parts, then check them
all individually and finally assemble the answer from the individual answers.&lt;/p&gt;
&lt;p&gt;The end result is that it feels like collision without actually using
collision. Now, you might be wondering why not just use actual collision
detection? For one, Unity's collision detection requires you to move objects
through the physics engine instead of directly. This means instead of moving
the block like you would in real life you need to use force, like dragging the
block with a rubber band. This feels just wrong, especially on a touch device.
If you move objects directly (i.e. using their Transform component) the physics
engine is likely to miss intersections. The other reason is that Unity's
collision detection just isn't made for packing objects together this tighly,
sooner or later things will just randomly  fly in all directions like the
puzzle exploded or something.&lt;/p&gt;
&lt;p&gt;Don't get me wrong, PhysiX was certainly developed by talented people who know
more than I do, but it was written with 3D action games in mind and trying to
get it to work in such a scenrio is like trying to fit a square peg into a
round hole; you might get it to kind of work well enough eventually, but in the
time it took you you might as well have written your own solution which you
have proper control over. Thanks to Grid Framework we can automate all the unit
conversion between world space and grid coordinates.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Changes:&lt;/strong&gt; I removed the minimumSpacing (rectangular grids) and minimumRadius
(hex grids) variables because they were stupid. The reason why they existed in
the first place was to prevent the user from setting too low or nonsensical
values for spacing and radius. The proper way to do this would be to use
accessors (also called properties), but Unity's editor scripting documentation
is rather lacking, so I couldn't figure out how to make the values not reset
all the time.&lt;/p&gt;
&lt;p&gt;I finally found the solution (that's a topic for another time) and now I
hardcoded a lower limit of 0.1 for both. I think that's a reasonable value, but
if you need to go lower please let me know. The way it works now is that if you
try to set the value to anything lower than 0.1 it will automatically default
to 0.1. I was also able to get rid of other ugly parts inside the source code
and clean things up thanks to accessors, but I don't think you will notice any
difference&lt;/p&gt;
&lt;p&gt;In terms of scripting this has no real consequences for you, just use spacing
and radius like you did before.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Fixes:&lt;/strong&gt; One major bug was a typo that could prevent the project from
building. I also removed the redundant "Use Custom Rendering Range" flag from
the inspector, now opening or closing the "Custom Rendering Range" foldout
toggles the value (in terms of scripting the varaible still exists, it's just
the way you set it in the inspector). Speaking of inspector and foldout,
previously the state of the "Draw &amp;amp; Render Settings" foldout reset each time
you entered or exited play mode. Now the settings will stick and it will be
individual for each grid type. There is also the obligatory under-the-hoods
improvements, but there is nothing particular worth mentioning there.&lt;/p&gt;
</summary><category term="old-blog"></category></entry><entry><title>Grid Framework version 1.2.0 released</title><link href="http://hiphish.github.io/grid-framework/news/2012/12/07/version-120/" rel="alternate"></link><published>2012-12-07T00:00:00+01:00</published><updated>2012-12-07T00:00:00+01:00</updated><author><name>HiPhish</name></author><id>tag:hiphish.github.io,2012-12-07:grid-framework/news/2012/12/07/version-120/</id><summary type="html">&lt;p&gt;The wait is over, version 1.2.0 is out, bringing you the long promised hex
grids. I'll soon make a video demonstrating the new grid, in the meantime let
me explain it in words. My implementation brings you all the features you knew
from rectangular grids, except on a hex grid, and both grids inherit from the
same base class. This means the API for both is the same and you can write one
script for both grids with little to no need to make special adjustments for
differentgrid classes. Currently there is only one coordinate system and hex
grids have "only" as much functionality as rectangular grids. I whish to
improve upon this in the future.&lt;/p&gt;
&lt;p&gt;Phew, this has really exhaused me. Often times I was wondering what I had
gotten myself into and it was not uncommon for me to work beyond midnight,
pondering above pencil-drawings, deriving formulae and thinking how to make
everything work nice. The last stretch has been especially tiresome, getting
the computer to do something is one thing, but then you start putting together
the manual and you notice that the way it &lt;em&gt;how&lt;/em&gt; it works doesn't feel right.
It's those little thing no one notices when they are done right but everyone
notices them when they are done wrong. What kept me pushing forward are you
guys and your support. Many of you are silent, and that's fine, but I know you
are there. Thank you.&lt;/p&gt;
</summary><category term="old-blog"></category></entry><entry><title>Grid Framework version 1.2.0 submitted</title><link href="http://hiphish.github.io/grid-framework/news/2012/12/07/version-120-submitted/" rel="alternate"></link><published>2012-12-07T00:00:00+01:00</published><updated>2012-12-07T00:00:00+01:00</updated><author><name>HiPhish</name></author><id>tag:hiphish.github.io,2012-12-07:grid-framework/news/2012/12/07/version-120-submitted/</id><summary type="html">&lt;p&gt;Just a quick update, version 1.2.0 has been submitted. This is your last chance
to buy the package for 15$, once it has been approved the price will be raised
to 20$.&lt;/p&gt;
</summary><category term="old-blog"></category></entry><entry><title>Grid Framework version 1.1.10 released</title><link href="http://hiphish.github.io/grid-framework/news/2012/11/30/version-1110/" rel="alternate"></link><published>2012-11-30T00:00:00+01:00</published><updated>2012-11-30T00:00:00+01:00</updated><author><name>HiPhish</name></author><id>tag:hiphish.github.io,2012-11-30:grid-framework/news/2012/11/30/version-1110/</id><summary type="html">&lt;p&gt;The 1.1.10 update brings in a new function, ScaleVector3(Vector scl) : Vector3
which takes in a vector and then scales it so it fits inside the grid. This is
similar to AlignVector3, which was introduced in the last update, to allow
performing the aligning and scaling without having to provide an actual
Transform.&lt;/p&gt;
&lt;p&gt;In other news, the hex grids are almost done. All the functionality has been
written, now I need to clean everything up and write the documentation. Hex
grids will be officially introduced in the 1.2.0 update, which I expect to
release within the next week or, if something goes wrong, the week after.
Unfortunately, due to all the work I have put into Grid Framework since the
first release I cannot charge 15$ anymore, starting with 1.2.0 the price will
be raised to 20$, so if you want a copy of Grid Framework, now is the time to
get it. When I originally released Grid Framework there were still many loose
ends and it was not integrated well into the workflow. When you downloaded it
from the Asset Store you had to move files manually in place, there were no
menu entries, you had to drag a script manually onto objects, there was no
custom inspector panel, there was no rendering, no Vectrosity support and less
examples included. Over the time I have been adressing all these shortcomings
and improving, but none on its own felt like they were justifying a price
increase. With hex grids I'm bringing in a major functionality update and I
believe the 20$ price tag is still well justified. Of course anyone who has
already purchased Grid Framework will get this and all future updates for free,
that was the deal when I first launched it and nothing is going to change about
that.&lt;/p&gt;
</summary><category term="old-blog"></category></entry><entry><title>Grid Framework version 1.1.9 released</title><link href="http://hiphish.github.io/grid-framework/news/2012/11/19/version-119/" rel="alternate"></link><published>2012-11-19T00:00:00+01:00</published><updated>2012-11-19T00:00:00+01:00</updated><author><name>HiPhish</name></author><id>tag:hiphish.github.io,2012-11-19:grid-framework/news/2012/11/19/version-119/</id><summary type="html">&lt;p&gt;Surprise update! Version 1.1.9 just got approved and it contains quite a few
changes:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;NEW METHOD AlignVector3: lets you align a single point represented as a
Vector3 instead of a Transform to a grid&lt;/li&gt;
&lt;li&gt;added the ability to lock a certain axis when calling AlignTransform and
AlignVector3&lt;/li&gt;
&lt;li&gt;added a new constructor to both GFBoolVector3 and GFColorVector3 that lets
you pass one parameter that gets applied to all components&lt;/li&gt;
&lt;li&gt;you can now lock axes in the Grid Align Panel as well&lt;/li&gt;
&lt;li&gt;aligning objects via the Grid Align Panel which already are in place won't do
anything, meaning they won't create redundant Undo entries anymore&lt;/li&gt;
&lt;li&gt;fixed an issue in GetVectrosityPointsSeperate&lt;/li&gt;
&lt;li&gt;renamed the classes BoolVector3 and ColorVector3 to GFBoolVector3 and
GFColorVector3 to avoid name collision&lt;/li&gt;
&lt;li&gt;size has always been a member of GFGrid, not GFRectGrid, I fixed that mistake
in the documentation&lt;/li&gt;
&lt;li&gt;minor clode cleanup and removing redundant code&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The first two are based on a user's suggestions, thank you for bringing those
up. Previously when you wanted to align a Transform it would be aligned along
all the axes, but now you can set certain axes to be left as they are (relative
to the grid's local space). Also, instead of aligning a Transform you can also
just align a Vector3 now, this is useful when you only need to calculate a
position. You need to specify a scale, which was previously taken straight from
the Transform, but I've set it to default to (1, 1, 1) so in most cases you
won't have to think about it. Of course the Grid Align Panel lets you lock axes
as well now. Since the option is passed as a GFBoolVector3 I added a new
convenient constructor to the class that takes only one parameter and sets all
entries to that. The same goes for GFColorVector3.&lt;/p&gt;
&lt;p&gt;Another improvement is that objects which are already in place in the editor
will be ignored by the Grid Align Panel when you try to align them. The reason
for this is that before, if you had set the Autosnapping flag and clicked on an
object that was already in place it would create an Undo entry even though you
didn't see anything happening. Now there will be an Undo only if something
happened.&lt;/p&gt;
&lt;p&gt;The function GetVectorsityPointSeperate had been broken due to a few typos
since release and I've only noticed it a few days ago. I guess no one was using
it yet, so it went unnoticed for quite a while. It definitely works now.&lt;/p&gt;
&lt;p&gt;The rest is just some under the hoods maintenance, moving code around, removing
redundant parts, updating the documentation, the usual stuff. None of it has
any impact on stability or performance, but it is important to keep things
clean when I finally release the Hex Grids.&lt;/p&gt;
&lt;p&gt;That's it for now, please enjoy the new features.&lt;/p&gt;
&lt;p&gt;HiPhish&lt;/p&gt;
</summary><category term="old-blog"></category></entry><entry><title>Version 1.1.7 released</title><link href="http://hiphish.github.io/grid-framework/news/2012/10/05/version-117/" rel="alternate"></link><published>2012-10-05T00:00:00+02:00</published><updated>2012-10-05T00:00:00+02:00</updated><author><name>HiPhish</name></author><id>tag:hiphish.github.io,2012-10-05:grid-framework/news/2012/10/05/version-117/</id><summary type="html">&lt;p&gt;Version 1.1.7 has been approved by the Asset Store team. I fixed a small typo
that prevented the menu item for adding the GFGridRenderCamera component from
working and I added two more examples,  video tutorials will follow soon. I
also redid the screenshots because the Asset Store ate my old ones somehow.&lt;/p&gt;
&lt;p&gt;The first example shows you how you can use a plain text file and Grid
Framework to build levels outside the editor. If you have a game like breakout
that's heavily based around grid-based design it would be tedious to design
each level via Drag&amp;amp;Drop in the editor. Another disadvantage is that changing
the level would mean switching the scene and it would be harder for players to
create their own levels as mods. In my example we design the level as a plain
text file where each character corresponds to one predefined prefab. Then we
need to set up only one scene and the text parser script will, along with the
grid, take the text file, read it and then place blocks accordingly. You can
even switch levels on the fly without changing the scene.&lt;/p&gt;
&lt;p&gt;The second example continues the grid-based movement example by placing
obstacles on the grid. One way to avoid them would be to attach colliders to
the obstacles and then have the walker perform a line cast in the direction of
its movement and see if the line cast hits anything. However, since this is
Grid Framework we can do better than that. In this example I create a matrix
that stores whether a tile is forbidden or not and then the walker checks if
its next target square is alowed or not. There are no colliders or physics
used.&lt;/p&gt;
</summary><category term="old-blog"></category></entry><entry><title>Version 1.1.6 submitted</title><link href="http://hiphish.github.io/grid-framework/news/2012/09/22/version-116/" rel="alternate"></link><published>2012-09-22T00:00:00+02:00</published><updated>2012-09-22T00:00:00+02:00</updated><author><name>HiPhish</name></author><id>tag:hiphish.github.io,2012-09-22:grid-framework/news/2012/09/22/version-116/</id><summary type="html">&lt;p&gt;&lt;strong&gt;Important Note:&lt;/strong&gt; The classes Grid and RectGrid have been renamed to GFGrid
and GFRectGrid, you will need to change your source code accordingly.&lt;/p&gt;
&lt;p&gt;You might be wondering why I would do such a thing more than one month after
releasing the package. Using regular English words is simple and intuitive;
however, the danger of name collision with another class called the same is
quite large. Let's say a user has already a class called Grid for something in
his or her project. When they buy Grid Frmework all of the sudden they will get
compilation errors because now there are two classes called Grid. It would be
unreasonable to expect users to change their class, especially if that class is
already part of a more complex chain of dependencies or inheritance. They could
change my code, but then they would have to change it after each single update
of Grid Framework. If the class Grid is already defined in some other third
party extension it gets even worse.&lt;/p&gt;
&lt;p&gt;Adding the GF in front of both classes reduces the chance of name collision. I
apologize to all my existing customers for having to change their source code
because I didn't think about this in time, but I had to resolve this before it
becomes an issue and the sooner I get it sorted out the less customers will
have to change their source code. I am very sorry, but this should fix the
problem once and for all.&lt;/p&gt;
&lt;p&gt;Aside from that the GFRectGrid class contains some minor code cleanup and
performance boosts, so it's not all bad news.&lt;/p&gt;
</summary><category term="old-blog"></category></entry><entry><title>Version 1.1.5 released</title><link href="http://hiphish.github.io/grid-framework/news/2012/09/06/version-115/" rel="alternate"></link><published>2012-09-06T00:00:00+02:00</published><updated>2012-09-06T00:00:00+02:00</updated><author><name>HiPhish</name></author><id>tag:hiphish.github.io,2012-09-06:grid-framework/news/2012/09/06/version-115/</id><summary type="html">&lt;p&gt;As per request the custom rendering range now affects drawing as well, not just
rendering. If you are wondering why this wasn't the case before, it was a
leftover from before the custom rendering range got implemented. Originally the
custom range was only meant for rendering because that would be what the layer
sees in the final game, not the drawing, whether they are the same or not.
Also, the drawing is only a drawing, the grid keeps working beyond what's
visible, being infinite. That's why the drawing had low priority and I worked
on other parts instead.&lt;/p&gt;
</summary><category term="old-blog"></category></entry><entry><title>Version 1.1.4 released</title><link href="http://hiphish.github.io/grid-framework/news/2012/09/05/version-114/" rel="alternate"></link><published>2012-09-05T00:00:00+02:00</published><updated>2012-09-05T00:00:00+02:00</updated><author><name>HiPhish</name></author><id>tag:hiphish.github.io,2012-09-05:grid-framework/news/2012/09/05/version-114/</id><summary type="html">&lt;p&gt;Version 1.1.4 has been approved. It doesn't add anything new for a change,
instead it fixes a bug where lines with a width larger than 1 were drawn on top
of things they were supposed to be under.&lt;/p&gt;
</summary><category term="old-blog"></category></entry><entry><title>Version 1.1.3 released</title><link href="http://hiphish.github.io/grid-framework/news/2012/08/15/version-113/" rel="alternate"></link><published>2012-08-15T00:00:00+02:00</published><updated>2012-08-15T00:00:00+02:00</updated><author><name>HiPhish</name></author><id>tag:hiphish.github.io,2012-08-15:grid-framework/news/2012/08/15/version-113/</id><summary type="html">&lt;p&gt;You know, sometimes I look at something and wonder "what kind of idiot designed
this!?", only this time I was the idiot. Let's say you wanted to render a
simple 3x3 grid and you wanted the origin to be in the lower left corner. Well,
you simply couldn't do that, not until now:&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;img alt="Screenshot of custom range in inspector" class="img-responsive" src="http://hiphish.github.io/grid-framework/news/2012/08/15/version-113/images/custom-range.png"/&gt;
&lt;/div&gt;
&lt;p&gt;Instead of using the size you can now specify your own range, the only
limitation is that From has to be less than To obviously. As a nice extra touch
those two fields will only appear when you you choose to use custom range,
otherwise they will be hidden and won't clutter your view.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Important note about updating:&lt;/strong&gt; Until now you got one folder and had to move the
Plugins folder to the root of your project view manually. This is no longer the
case, Grid Framework should now place all files in their proper directory
without you having to do anything. If you have an older version of Grid
Framework and get errors or warnings please delete all your old Grid Framework
files. This is the last time you will have to do anything manually.&lt;/p&gt;
&lt;p&gt;I am sorry for this inconvenience, but there is some common misinformation that
all assets must be in one folder. The fact is you can send your entire "Assets"
folder and the Asset Store Tools will be ignored.&lt;/p&gt;
</summary><category term="old-blog"></category></entry><entry><title>Version 1.1.2 released</title><link href="http://hiphish.github.io/grid-framework/news/2012/08/14/version-112/" rel="alternate"></link><published>2012-08-14T00:00:00+02:00</published><updated>2012-08-14T00:00:00+02:00</updated><author><name>HiPhish</name></author><id>tag:hiphish.github.io,2012-08-14:grid-framework/news/2012/08/14/version-112/</id><summary type="html">&lt;p&gt;It's up, version 1.1.2 brings Vectrosity support, better documentation and
integrates Grid Framework into the menu bar. From now on you will never again
have to drag scripts manually from the Plugins folder onto objects when using
Grid Framework.&lt;/p&gt;
&lt;div class="youtube youtube-16x9"&gt;&lt;iframe allowfullscreen="" frameborder="0" seamless="" src="https://www.youtube.com/embed/99J52oEFnPA"&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;p&gt;If you want to try the Vectrosity examples please uncomment the scripts. I had
them commented so they wouldn't give errors to customers who don't have
Vectrosity installed.&lt;/p&gt;
</summary><category term="old-blog"></category></entry><entry><title>Version 1.1.0 out now - rendering included</title><link href="http://hiphish.github.io/grid-framework/news/2012/08/08/version-110/" rel="alternate"></link><published>2012-08-08T00:00:00+02:00</published><updated>2012-08-08T00:00:00+02:00</updated><author><name>HiPhish</name></author><id>tag:hiphish.github.io,2012-08-08:grid-framework/news/2012/08/08/version-110/</id><summary type="html">&lt;p&gt;Unity just approved version 1.1.0, which includes the new inspector panel and
the rendering setup. Now you can see your grid in the finished game, no pro
license or any other addon needed.&lt;/p&gt;
&lt;div class="youtube youtube-16x9"&gt;&lt;iframe allowfullscreen="" frameborder="0" seamless="" src="https://www.youtube.com/embed/BhbrMHBasRs"&gt;&lt;/iframe&gt;&lt;/div&gt;</summary><category term="old-blog"></category></entry><entry><title>Version 1.0.1</title><link href="http://hiphish.github.io/grid-framework/news/2012/08/04/version-101/" rel="alternate"></link><published>2012-08-04T00:00:00+02:00</published><updated>2012-08-04T00:00:00+02:00</updated><author><name>HiPhish</name></author><id>tag:hiphish.github.io,2012-08-04:grid-framework/news/2012/08/04/version-101/</id><summary type="html">&lt;p&gt;If you tried debugging the functions FindNearestFace() or FindNearestBox() you
might have noticed that the cubes drawn didn't have the same rotation as the
grid. While it didn't change anything about the returned value (only the centre
of the cube mattered), it looked ugly. I've submitted a small update that fixes
the rotation:&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;img alt="Image of a rotated cube gizmo" class="img-responsive" src="http://hiphish.github.io/grid-framework/news/2012/08/04/version-101/images/rotated-cube.png"/&gt;
&lt;/div&gt;
&lt;p&gt;The update should get approved soon.&lt;/p&gt;
</summary><category term="old-blog"></category></entry><entry><title>Release!</title><link href="http://hiphish.github.io/grid-framework/news/2012/08/01/release/" rel="alternate"></link><published>2012-08-01T00:00:00+02:00</published><updated>2012-08-01T00:00:00+02:00</updated><author><name>HiPhish</name></author><id>tag:hiphish.github.io,2012-08-01:grid-framework/news/2012/08/01/release/</id><summary type="html">&lt;p&gt;Grid Framework has been approved and is fom now available on the Unity Asset
Store for 15$&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://u3d.as/content/hi-phish/grid-framework"&gt;http://u3d.as/content/hi-phish/grid-framework&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This is the price for the initial release, it will go up as the amount of
features increases, but all existing customers will get all updates for free.
Please feel free to visit the support thread and drop me a line if you have any
questions or suggestions. Once the first wave of purchases has passed and if
there are no issues I will start working on either hex grids or grid rendering,
whichever you guys might find more important.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://forum.unity3d.com/threads/144886-Grid-Framework-scripting-and-editor-plugins"&gt;http://forum.unity3d.com/threads/144886-Grid-Framework-scripting-and-editor-plugins&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;And to think that is has already been four months since I started this blog...
the framework has gone quite a long way from a quick &amp;amp; dirty solution I rolled
up in two days to something I can proudly announce. I am looking forward to an
even brighter future for Grid Framework.&lt;/p&gt;
</summary><category term="old-blog"></category></entry></feed>